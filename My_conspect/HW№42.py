"""
–ó–∞–≤–¥–∞–Ω–Ω—è 1. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∑ Event (—Ä—ñ–≤–µ–Ω—å: —Å–µ—Ä–µ–¥–Ω—ñ–π)
–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: asyncio.Event
________________________________________
üìÑ –£–º–æ–≤–∞:
‚Ä¢	–û–¥–Ω–∞ –∫–æ—Ä—É—Ç–∏–Ω–∞ (watcher) —á–µ–∫–∞—î –Ω–∞ —Å–∏–≥–Ω–∞–ª –≤—ñ–¥ —ñ–Ω—à–æ—ó (trigger).
‚Ä¢	–ü—ñ—Å–ª—è —Å–∏–≥–Ω–∞–ª—É –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ—á–∏–Ω–∞—î —Ä–∞—Ö—É–≤–∞—Ç–∏ –¥–æ 5 –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 —Å–µ–∫.
‚Ä¢	–î–æ –ø–æ–¥—ñ—ó –º–∞—î –≤–∏–≤–æ–¥–∏—Ç–∏—Å—å –û—á—ñ–∫—É—é —Å–∏–≥–Ω–∞–ª—É...
________________________________________
üîß –¶—ñ–ª—å:
‚Ä¢	–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –º—ñ–∂ –∑–∞–¥–∞—á–∞–º–∏.
"""
import asyncio

async def watcher(event: asyncio.Event):
    print('[Watcher] –û—á—ñ–∫—É—é —Å–∏–≥–Ω–∞–ª—É...')
    await event.wait()
    print('\n[Watcher] –°–∏–≥–Ω–∞–ª –æ—Ç—Ä–∏–º–∞–Ω–æ! –ü–æ—á–∏–Ω–∞—é –≤—ñ–¥–ª—ñ–∫.')
    for i in range(1, 6):
        print(f'–õ—ñ—á–∏–ª—å–Ω–∏–∫: {i}')
        await asyncio.sleep(1)
    print('[Watcher] –í—ñ–¥–ª—ñ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.')

async def trigger(event: asyncio.Event, delay: int):
    print(f'[Trigger] –Ø –Ω–∞–¥—ñ—à–ª—é —Å–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥–∏.')
    await asyncio.sleep(delay)
    print('[Trigger] –ù–∞–¥—Å–∏–ª–∞—é —Å–∏–≥–Ω–∞–ª!')
    event.set()

async def main():
    signal_event = asyncio.Event()
    watcher_task = asyncio.create_task(watcher(signal_event))
    trigger_task = asyncio.create_task(trigger(signal_event, delay=3))
    await asyncio.gather(watcher_task, trigger_task)
    print('\n[Main] –ú–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è! –ö—ñ–Ω–µ—Ü—å.')

if __name__ == '__main__':
    asyncio.run(main())
#========================================================================

"""
–ó–∞–≤–¥–∞–Ω–Ω—è 2. –û–±–º–µ–∂–µ–Ω–∏–π –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á –∑ Semaphore (—Ä—ñ–≤–µ–Ω—å: —Å–µ—Ä–µ–¥–Ω—å–æ-—Å–∫–ª–∞–¥–Ω–∏–π)
–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: asyncio.Semaphore
________________________________________
üìÑ –£–º–æ–≤–∞:
‚Ä¢	–Ñ —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç—ñ–≤ (–º–æ–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ —ñ–º–µ–Ω–∞ —Å–∞–π—Ç—ñ–≤, –±–µ–∑ —Å–ø—Ä–∞–≤–∂–Ω—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤).
‚Ä¢	–Ü–º—ñ—Ç—É—î—Ç—å—Å—è "–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è" –∫–æ–∂–Ω–æ–≥–æ –∑ –Ω–∏—Ö (—á–µ—Ä–µ–∑ await asyncio.sleep(...)).
‚Ä¢	–ù–µ –±—ñ–ª—å—à–µ 3 —Å–∞–π—Ç–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è.
________________________________________
üîß –¶—ñ–ª—å:
‚Ä¢	–æ–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑–∞–¥–∞—á.
________________________________________
"""
import asyncio  #–ø–∏—à—É —Ç—É—Ç, —â–æ–± –≤–∞–º –º–æ–∂–Ω–∞ –±—É–ª–æ —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –∑ —É—Å—ñ–º —ñ –ø—Ä–æ–≤—ñ—Ä–∏—Ç–∏
import random

SITES = [
    'google.com',
    'facebook.com',
    'youtube.com',
    'twitter.com',
    'instagram.com',
    'linkedin.com',
    'github.com',
    'wikipedia.org',
    'reddit.com',
]

async def download_site(semaphore: asyncio.Semaphore, site: str):
    async with semaphore:
        print(f'[Download] ! –ü–æ—á–∏–Ω–∞—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è [{site}] (–°–ª–æ—Ç –∑–∞–π–Ω—è—Ç–æ)')
        download_time = random.uniform(3, 8)
        await asyncio.sleep(download_time)
        print(f'    [Download] ### {site} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ! (–°–ª–æ—Ç –∑–≤—ñ–ª—å–Ω–µ–Ω–æ)')

async def main():
    semaphore = asyncio.Semaphore(3)
    print(f'–ó–∞–ø—É—Å–∫–∞—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {len(SITES)} —Å–∞–π—Ç—ñ–≤ –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º –≤ 3 –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑\'—î–¥–Ω–∞–Ω–Ω—è.\n')
    tasks = [asyncio.create_task(download_site(semaphore, site)) for site in SITES]
    await asyncio.gather(*tasks)
    print('\n[Main] –í—Å–µ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!')

if __name__ == "__main__":
    asyncio.run(main())
#=======================================================================================


"""
–ó–∞–≤–¥–∞–Ω–Ω—è 3. –ü—Ä–æ–¥—é—Å–µ—Ä / –ö–æ–Ω—Å—é–º–µ—Ä –∑ Queue —Ç–∞ cancel (—Ä—ñ–≤–µ–Ω—å: —Å–∫–ª–∞–¥–Ω–∏–π)
–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏: asyncio.Queue, asyncio.create_task, cancel()
________________________________________
üìÑ –£–º–æ–≤–∞:
‚Ä¢	producer() ‚Äî –¥–æ–¥–∞—î –≤ —á–µ—Ä–≥—É –≤–∏–ø–∞–¥–∫–æ–≤—ñ —á–∏—Å–ª–∞ –∫–æ–∂–Ω—ñ 0.5 —Å–µ–∫—É–Ω–¥–∏.
‚Ä¢	consumer() ‚Äî –æ–±—Ä–æ–±–ª—è—î —á–∏—Å–ª–∞ (—ñ–º—ñ—Ç–∞—Ü—ñ—è —á–µ—Ä–µ–∑ sleep(1)).
‚Ä¢	–ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –∑—É–ø–∏–Ω–∏—Ç–∏—Å—å:
o	–∑—É–ø–∏–Ω–∏—Ç–∏ –ø—Ä–æ–¥—é—Å–µ—Ä–∞,
o	–≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Å–ø–æ–∂–∏–≤–∞—á–∞,
o	–∑–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É –∞–∫—É—Ä–∞—Ç–Ω–æ.
________________________________________
üîß –¶—ñ–ª—å:
‚Ä¢	—Ä–æ–±–æ—Ç–∞ –∑ —á–µ—Ä–≥–æ—é,
‚Ä¢	–∫–æ–Ω—Ç—Ä–æ–ª—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —ñ –≤—ñ–¥–º—ñ–Ω–∞ –∑–∞–¥–∞—á.
"""
import asyncio  #–ø–∏—à—É —Ç—É—Ç, —â–æ–± –≤–∞–º –º–æ–∂–Ω–∞ –±—É–ª–æ —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –∑ —É—Å—ñ–º —ñ –ø—Ä–æ–≤—ñ—Ä–∏—Ç–∏
import random

async def producer(queue: asyncio.Queue):
    print('[Producer] –ü–æ—á–∞–≤ —Ä–æ–±–æ—Ç—É. –ì–µ–Ω–µ—Ä—É—é —á–∏—Å–ª–∞...')
    try:
        while True:
            number = random.randint(1, 100)
            await queue.put(number)
            print(f'[Producer] --> –î–æ–¥–∞–≤ —É —á–µ—Ä–≥—É: {number}')
            await asyncio.sleep(2)
    except asyncio.CancelledError:
        print('[Producer] –ú–µ–Ω–µ –∑—É–ø–∏–Ω–∏–ª–∏! –ó–∞–≤–µ—Ä—à—É—é —Ä–æ–±–æ—Ç—É.')

async def consumer(queue: asyncio.Queue):
    print('[Consumer] –ü–æ—á–∞–≤ —Ä–æ–±–æ—Ç—É. –û—á—ñ–∫—É—é –Ω–∞ —á–∏—Å–ª–∞...')
    try:
        while True:
            number = await queue.get()
            print(f'  [Consumer] ! –û—Ç—Ä–∏–º–∞–≤: {number}. –ü–æ—á–∏–Ω–∞—é –æ–±—Ä–æ–±–∫—É (1 —Å–µ–∫)...')
            await asyncio.sleep(2)
            print(f'  [Consumer] ### {number} –æ–±—Ä–æ–±–ª–µ–Ω–æ.')
            queue.task_done()
    except asyncio.CancelledError:
        print('[Consumer] –ú–µ–Ω–µ –∑—É–ø–∏–Ω–∏–ª–∏! –ó–∞–≤–µ—Ä—à—É—é —Ä–æ–±–æ—Ç—É.')

async def main():
    shared_queue = asyncio.Queue()
    producer_task = asyncio.create_task(producer(shared_queue))
    consumer_task = asyncio.create_task(consumer(shared_queue))
    print('\n[Main] –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞. –ü—Ä–∞—Ü—é—î–º–æ 7 —Å–µ–∫—É–Ω–¥...')
    await asyncio.sleep(7)
    print('\n[Main] –ß–∞—Å –≤–∏–π—à–æ–≤! –ü–æ—á–∏–Ω–∞—é –≤—Å–µ –∑—É–ø–∏–Ω—è—Ç–∏.')
    print('[Main] –°–∫–∞—Å–æ–≤—É—é –∑–∞–¥–∞—á—É producer...')
    producer_task.cancel()
    print('[Main] –°–∫–∞—Å–æ–≤—É—é –∑–∞–¥–∞—á—É consumer...')
    consumer_task.cancel()
    await asyncio.gather(producer_task, consumer_task, return_exceptions=True)
    print('\n[Main] –°–∏—Å—Ç–µ–º–∞ —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–∞.')

if __name__ == '__main__':
    asyncio.run(main())
