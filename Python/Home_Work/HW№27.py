"""
–ó–∞–≤–¥–∞–Ω–Ω—è 2: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª—è (—Å–∫–ª–∞–¥–Ω—ñ—à–µ)
‚Ä¢	–°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å PasswordManager:
‚Ä¢	–ü—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–ª–µ  password (—Ä–µ–∂–∏–º –¥–æ—Å—Ç—É–ø—É private)
‚Ä¢	–ú–µ—Ç–æ–¥ set_password(pwd) ‚Äî –ø—Ä–∏–π–º–∞—î –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å, —è–∫—â–æ –≤—ñ–Ω –¥–æ–≤—à–∏–π –∑–∞ 6 —Å–∏–º–≤–æ–ª—ñ–≤.
‚Ä¢	–ú–µ—Ç–æ–¥ check_password(pwd) ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Å–ø—ñ–≤–ø–∞–¥–∞—î –ø–µ—Ä–µ–¥–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å –∑ –ø–æ—Ç–æ—á–Ω–∏–º. (—Ä–µ–∂–∏–º –¥–æ—Å—Ç—É–ø—É protected)
‚Ä¢	–ú–µ—Ç–æ–¥ change_password(old, new) ‚Äî –∑–º—ñ–Ω—é—î –ø–∞—Ä–æ–ª—å, —è–∫—â–æ —Å—Ç–∞—Ä–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ –Ω–æ–≤–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–º–æ–≥–∞–º.
"""

class PasswordManager:  #–ö–ª–∞—Å –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª–µ–º –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é —Ç–∞ –æ–±–º–µ–∂–µ–Ω–∏–º –¥–æ—Å—Ç—É–ø–æ–º.
    def __init__(self): #–ú–µ—Ç–æ–¥-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—É.
        self.__password: str | None = None  #–ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å
        print('–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª—ñ–≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ü–∞—Ä–æ–ª—å —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.')

    def set_password(self, pwd: str):   # –ú–µ—Ç–æ–¥ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è (–∞–±–æ –∑–º—ñ–Ω–∏) –ø–∞—Ä–æ–ª—è.
        if not isinstance(pwd, str):
            print(f'!!!–ü–æ–º–∏–ª–∫–∞: –ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ —Ä—è–¥–∫–æ–º, –æ—Ç—Ä–∏–º–∞–Ω–æ {type(pwd).__name__}.')
            return
        if len(pwd) > 6:
            self.__password = pwd
            print('‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.')
        else:
            print('!!!‚ùå –ü–æ–º–∏–ª–∫–∞: –ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –¥–æ–≤—à–∏–º –∑–∞ 6 —Å–∏–º–≤–æ–ª—ñ–≤.')

    def _check_password(self, pwd_to_check: str) -> bool:   # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –ø–∞—Ä–æ–ª—ñ–≤.
        if self.__password is None:
            print('!!! –ü–æ–º–∏–ª–∫–∞ : –ü–∞—Ä–æ–ª—å —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.')
            return False
        if not isinstance(pwd_to_check, str):
            print(f'!!!–ü–æ–º–∏–ª–∫–∞ : –í–≤–µ–¥–µ–Ω–∏–π –ø–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ —Ä—è–¥–∫–æ–º, –æ—Ç—Ä–∏–º–∞–Ω–æ {type(pwd_to_check).__name__}.')
            return False
        return self.__password == pwd_to_check

    def change_password(self, old_pwd: str, new_pwd: str):  # –ú–µ—Ç–æ–¥ –¥–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è.
        print('\n- –°–ø—Ä–æ–±–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è -')
        if self._check_password(old_pwd):
            print('–°—Ç–∞—Ä–∏–π –ø–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –°–ø—Ä–æ–±–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤–∏–π...')
            self.set_password(new_pwd)
        else:
            print('!!!‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞—Ä–∏–π –ø–∞—Ä–æ–ª—å.')

# --- –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ---
manager = PasswordManager()

print('\n-- –°–ø—Ä–æ–±–∏ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–∞—Ä–æ–ª—å --')
manager.set_password('Cat') # –ü–æ–º–∏–ª–∫–∞ # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å
manager.set_password(1234567890) # –ü–æ–º–∏–ª–∫–∞ # –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–∏–ø
manager.set_password('DonaldTramp2025') # –£—Å–ø—ñ—Ö

print('\n---- –°–ø—Ä–æ–±–∏ –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å ----')
manager.change_password('QWERTY123456790', 'IlonMask02052025') # –ü–æ–º–∏–ª–∫–∞
manager.change_password('DonaldTramp2025', 'Dog') # –ü–æ–º–∏–ª–∫–∞
manager.change_password('DonaldTramp2025', 'IlonMask02052025') # –£—Å–ø—ñ—Ö
#=================================================================================

"""
–ó–∞–≤–¥–∞–Ω–Ω—è 3: –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
‚Ä¢	–°—Ç–≤–æ—Ä–∏ —ñ—î—Ä–∞—Ä—Ö—ñ—é –∫–ª–∞—Å—ñ–≤:
‚Ä¢	–ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å User:
‚Ä¢	–ü—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–ª—è: __username, __password.
‚Ä¢	–ú–µ—Ç–æ–¥ check_password(pwd).
‚Ä¢	–ú–µ—Ç–æ–¥ get_username().
‚Ä¢	–ú–µ—Ç–æ–¥ change_password(old, new) ‚Äî —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Å—Ç–∞—Ä–∏–π –ø–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ –Ω–æ–≤–∏–π > 6 —Å–∏–º–≤–æ–ª—ñ–≤.
‚Ä¢	–ü–æ—Ö—ñ–¥–Ω–∏–π –∫–ª–∞—Å Admin
‚Ä¢	–ú–µ—Ç–æ–¥ reset_password(user, new_password) ‚Äî –¥–æ–∑–≤–æ–ª—è—î –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–¥–æ—Å—Ç—É–ø –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è —á–µ—Ä–µ–∑ –ø—É–±–ª—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—É).
‚Ä¢	–£–º–æ–≤–∏: –ù—ñ—Ö—Ç–æ –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ __password –Ω–∞–ø—Ä—è–º—É.
"""
class User: # –ö–ª–∞—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    def __init__(self, username: str, password: str):   #–ú–µ—Ç–æ–¥ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ª–æ–≥—ñ–Ω—É —Ç–∞ –ø–∞—Ä–æ–ª—è.
        self.__username: str = ""
        self.__password: str | None = None
        if not isinstance(username, str) or not username.strip():
             raise ValueError('–õ–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º–∞—î –±—É—Ç–∏ –Ω–µ–ø—É—Å—Ç–∏–º —Ä—è–¥–∫–æ–º.')
        self.__username = username.strip()
        print(f'–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "{self.get_username()}". –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è...')
        self.set_password(password)
        if self.__password is None:
             raise ValueError('–ü–æ–º–∏–ª–∫–∞, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫.')
        print(f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "{self.get_username()}" —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ.')

    def set_password(self, pwd: str):   # –ú–µ—Ç–æ–¥ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è (–ø—É–±–ª—ñ—á–Ω–∏–π –º–µ—Ç–æ–¥).
        if not isinstance(pwd, str):
            print(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è: –ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ —Ä—è–¥–∫–æ–º, –æ—Ç—Ä–∏–º–∞–Ω–æ {type(pwd).__name__}.')
            return
        if len(pwd) > 6:
            self.__password = pwd
            print('‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.')
        else:
            print('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è: –ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –¥–æ–≤—à–∏–º –∑–∞ 6 —Å–∏–º–≤–æ–ª—ñ–≤.')

    def check_password(self, pwd_to_check: str) -> bool:    # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –ø–∞—Ä–æ–ª—ñ–≤ (–ø—É–±–ª—ñ—á–Ω–∏–π –º–µ—Ç–æ–¥).
        if self.__password is None:
            print('ü§∑ –ù–µ–º–∞—î –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.')
            return False
        if not isinstance(pwd_to_check, str):
            print(f'–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: –í–≤–µ–¥–µ–Ω–∏–π –ø–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ —Ä—è–¥–∫–æ–º, –æ—Ç—Ä–∏–º–∞–Ω–æ {type(pwd_to_check).__name__}.')
            return False
        return self.__password == pwd_to_check

    def get_username(self) -> str:  # –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥—ñ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        return self.__username

    def change_password(self, old_pwd: str, new_pwd: str):  # –ú–µ—Ç–æ–¥ –¥–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.
        print(f'\n--- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á "{self.get_username()}" —Å–ø—Ä–æ–±—É–≤–∞–≤ –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å ---')
        if self.check_password(old_pwd):
            print('–°—Ç–∞—Ä–∏–π –ø–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –°–ø—Ä–æ–±–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤–∏–π...')
            self.set_password(new_pwd)
        else:
            print('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞—Ä–∏–π –ø–∞—Ä–æ–ª—å.')

    def __str__(self) -> str:
        return f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {self.get_username()}'

    def __repr__(self) -> str:
        return f'{self.__class__.__name__}(username="{self.get_username()}", password="***")'


class Admin(User):  # –ö–ª–∞—Å Admin
    def __init__(self, username: str, password: str):
        super().__init__(username, password)
        print(f'–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ "{self.get_username()}" —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ.')

    def reset_password(self, user: User, new_password: str):    # –ú–µ—Ç–æ–¥ –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        print(f'\n--- –ê–¥–º—ñ–Ω "{self.get_username()}" —Å–ø—Ä–æ–±—É–≤–∞–≤ —Å–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É "{user.get_username()}" ---')
        if not isinstance(user, User):
            print(f'‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è: {user} –Ω–µ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —Å–∏—Å—Ç–µ–º–∏.')
            return
        if user is self:
             print('‚ö†Ô∏è –£–≤–∞–≥–∞: –ê–¥–º—ñ–Ω —Å–∫–∏–¥–∞—î –ø–∞—Ä–æ–ª—å —Å–æ–±—ñ.')
        print(f'–ê–¥–º—ñ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "{user.get_username()}"...')
        user.set_password(new_password)

    def __str__(self) -> str:
        return f'–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä: {self.get_username()}'

    def __repr__(self) -> str:
         return f'Admin(username="{self.get_username()}", password="***")'


# --- –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ---
print('--- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ---')
# –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
try:
    user1 = User('–ñ–∞–Ω-–õ—é–∫ –ü—ñ–∫–∞—Ä', 'USS-Enterprise') # –£—Å–ø—ñ—Ö
    user2 = User('–î–∂–µ–π–º—Å –¢. –ö—ñ—Ä–∫', 'Ship') # –ü–æ–º–∏–ª–∫–∞
except ValueError as e:
    print(e)

print('----- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ -----')
# –°—Ç–≤–æ—Ä—é—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
try:
    admin1 = Admin('admin_super', 'SuperAdmin0123456789!') # –í–∞–ª—ñ–¥–Ω–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º—ñ–Ω–∞
    admin2 = Admin('admin_light', 'cat') # –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º—ñ–Ω–∞ (–≤–∏–∫–ª–∏—á–µ ValueError)
except ValueError as e:
     print(e)

# –ü–µ—Ä–µ—Å—Ç–≤–æ—Ä–∏–º–æ user2 —Ç–∞ admin2 –∑ –≤–∞–ª—ñ–¥–Ω–∏–º–∏ –ø–∞—Ä–æ–ª—è–º–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤
print('\n--- –ü–µ—Ä–µ—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –≤–∞–ª—ñ–¥–Ω–∏–º–∏ –ø–∞—Ä–æ–ª—è–º–∏ ---')
user2 = User('–î–∂–µ–π–º—Å –¢. –ö—ñ—Ä–∫', 'Deep-Space')
admin2 = Admin('admin_light', 'TestAdminPwd987')

print('\n--- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–µ—Ç–æ–¥—ñ–≤ –∫–ª–∞—Å—É User ---')
print(user1.get_username())
print(user2.get_username())

print('\n--- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–µ—Ç–æ–¥—ñ–≤ –∫–ª–∞—Å—É Admin ---')
print(admin1.get_username())
print(admin2.get_username())

# –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
user1.change_password('WrongOld', 'NewSecurePassword')  # –ü–æ–º–∏–ª–∫–∞
user1.change_password('USS-Enterprise', 'short')    # –ü–æ–º–∏–ª–∫–∞
user1.change_password('USS-Enterprise', 'Next-Generation!1987')  #–£—Å–ø—ñ—Ö

print('\n--- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–µ—Ç–æ–¥—É Admin.reset_password ---')
admin1.reset_password(user1, 'Star-Track')
admin1.reset_password(user2, 'short') # –ü–æ–º–∏–ª–∫–∞
admin2.reset_password(admin1, 'NewPassword_From_Admin2_ABC!')
admin1.reset_password(admin1, 'NewPassword_Myself_ABC!')
#=======================================================================================================

"""
–ó–∞–≤–¥–∞–Ω–Ω—è 4: –†–æ–∑—Ä–æ–±—ñ—Ç—å —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏ —Ç–∞–∫—Å—ñ. 
–ö–æ–∂–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞, –∞–¥—Ä–µ—Å—É, —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±—ñ–ª—è —Ç–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å. 
–†–µ–∞–ª—ñ–∑—É–π—Ç–µ –º–µ—Ç–æ–¥–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å, –∑–º—ñ–Ω–∏ –∞–¥—Ä–µ—Å–∏ —Ç–∞ —Ç–∏–ø—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è, –∞ —Ç–∞–∫–æ–∂ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. 
–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —ñ–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—é –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ –≤—ñ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –∑–º—ñ–Ω. 
*–ú–æ–∂–µ—Ç–µ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–æ—ó –≤–∑–∞—î–º–æ–¥—ñ—ó.
–ü–µ—Ä–µ–ª—ñ–∫ –º–æ–∂–ª–∏–≤–∏—Ö –∫–ª–∞—Å—ñ–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: –ö–ª—ñ—î–Ω—Ç, –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è, –ê–≤—Ç–æ (–ú–æ–∂–µ –±—É—Ç–∏ –ó–≤–∏—á–∞–π–Ω–∏–π, –ü—Ä–µ–º—ñ—É–º‚Ä¶), 
*–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å(–º–æ–∂–µ –±—É—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—î—é).
"""


class Client:   #–ö–ª–∞—Å –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞–∫—Å—ñ.
    def __init__(self, name: str):
        self.name = name

    def __str__(self) -> str:
        return self.name


class CarType:  #–ö–ª–∞—Å —Ç–∏–ø—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è —Ç–∞ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –≤–∞—Ä—Ç–æ—Å—Ç—ñ.
    def __init__(self, name: str, cost_multiplier: float):
        self.name = name
        self.cost_multiplier = cost_multiplier

    def __str__(self) -> str:
        return self.name

CarType.STANDARD = CarType('–°—Ç–∞–Ω–¥–∞—Ä—Ç', 1.0)
CarType.PREMIUM = CarType('–ü—Ä–µ–º—ñ—É–º', 1.5)
CarType.VAN = CarType('–ú—ñ–Ω—ñ–≤–µ–Ω', 1.8)


class Order:    #–ö–ª–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–∫—Å—ñ.
    _next_order_id = 1 # –ê—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö ID

    def __init__(self, client: Client, pickup_address: str, destination_address: str, car_type: CarType, base_rate: float):
        self.order_id = Order._next_order_id
        Order._next_order_id += 1

        self.client = client
        self.pickup_address = pickup_address
        self.destination_address = destination_address
        self.car_type = car_type
        self.status = '–°—Ç–≤–æ—Ä–µ–Ω–æ'
        self.__cost = 0.0   #–í–∞—Ä—Ç—ñ—Å—Ç—å
        self._calculate_cost(base_rate)

    def __str__(self) -> str:
        return (f'–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{self.order_id} ({self.status}): –ö–ª—ñ—î–Ω—Ç: {self.client}, '
                f'–ó–≤—ñ–¥–∫–∏: {self.pickup_address}, –ö—É–¥–∏: {self.destination_address}, '
                f'–ê–≤—Ç–æ: {self.car_type}, –í–∞—Ä—Ç—ñ—Å—Ç—å: {self.get_cost():.2f} –≥—Ä–Ω')

    def _calculate_cost(self, base_rate: float):    # –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ.
        try:
             distance_factor = (len(self.pickup_address) + len(self.destination_address)) / 10.0
             if distance_factor < 1: distance_factor = 1
             calculated_cost = base_rate * self.car_type.cost_multiplier * distance_factor
             self.__cost = round(calculated_cost, 2)
             print(f'(–í–∞—Ä—Ç—ñ—Å—Ç—å –¥–ª—è #{self.order_id} —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ: {self.__cost:.2f})')

        except Exception as e:
             print(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{self.order_id}: {e}')
             self.__cost = 0.0

    def get_cost(self) -> float:    # –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ
        return self.__cost

    def set_address(self, new_pickup: str | None = None, new_destination: str | None = None):
        # –ú–µ—Ç–æ–¥ –∑–º—ñ–Ω—é—î –∞–¥—Ä–µ—Å—É –ø–æ—Å–∞–¥–∫–∏ –∞–±–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è.
        changed = False
        if new_pickup is not None and isinstance(new_pickup, str) and new_pickup.strip():
            self.pickup_address = new_pickup.strip()
            changed = True
            print(f'–ê–¥—Ä–µ—Å—É –ø–æ—Å–∞–¥–∫–∏ –¥–ª—è #{self.order_id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ "{self.pickup_address}".')
        if new_destination is not None and isinstance(new_destination, str) and new_destination.strip():
            self.destination_address = new_destination.strip()
            changed = True
            print(f'–ê–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è #{self.order_id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ "{self.destination_address}".')
        if not changed:
             print(f'–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–º—ñ–Ω–∏ –∞–¥—Ä–µ—Å–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{self.order_id}.')

    def set_car_type(self, new_car_type: CarType, base_rate: float):
        # –ú–µ—Ç–æ–¥ –¥–ª—è –∑–º—ñ–Ω–∏ —Ç–∏–ø—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è —Ç–∞ –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–∫—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ.
        if not isinstance(new_car_type, CarType):
            print(f'–ü–æ–º–∏–ª–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±—ñ–ª—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{self.order_id}.')
            return

        self.car_type = new_car_type
        print(f'–¢–∏–ø –∞–≤—Ç–æ –¥–ª—è #{self.order_id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {self.car_type}.')
        self._calculate_cost(base_rate)
        print(f'–ù–æ–≤–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{self.order_id}: {self.get_cost():.2f} –≥—Ä–Ω')


class OrderManager: # –ö–ª–∞—Å –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å
    def __init__(self, base_rate: float):
        self.orders: dict[int, Order] = {}
        self._base_rate = float(base_rate)

    def add_order(self, client: Client, pickup_address: str, destination_address: str, car_type: CarType):
        # –ú–µ—Ç–æ–¥ —Å—Ç–≤–æ—Ä—é—î —Ç–∞ –¥–æ–¥–∞—î –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–≤–æ—Ä–µ–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
        order = Order(client, pickup_address, destination_address, car_type, self._base_rate)
        self.orders[order.order_id] = order
        print(f'‚úîÔ∏è –î–æ–¥–∞–Ω–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.order_id}.')
        return order

    def find_order(self, order_id: int) -> Order | None:    # –ú–µ—Ç–æ–¥ —à—É–∫–∞—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ ID.
        if not isinstance(order_id, int) or order_id <= 0:
             print('‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫—É.')
             return None
        return self.orders.get(order_id)

    def change_order(self, order_id: int, new_pickup: str | None = None, new_destination: str | None = None, new_car_type: CarType | None = None):
        # –ú–µ—Ç–æ–¥ –∑–º—ñ–Ω—é—î –¥–∞–Ω—ñ —ñ—Å–Ω—É—é—á–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–∞–¥—Ä–µ—Å—É –∞–±–æ —Ç–∏–ø –∞–≤—Ç–æ).
        order = self.find_order(order_id)
        if order:
            print(f'\n--- –ó–º—ñ–Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} ---')
            if new_pickup is not None or new_destination is not None:
                order.set_address(new_pickup, new_destination)
            if new_car_type is not None:
                order.set_car_type(new_car_type, self._base_rate)
            if new_pickup is None and new_destination is None and new_car_type is None:
                print('–ù–µ –≤–∫–∞–∑–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –∑–º—ñ–Ω–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.')
        else:
            print(f'‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID {order_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')

    def delete_order(self, order_id: int):  # –ú–µ—Ç–æ–¥ –≤–∏–¥–∞–ª—è—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ ID.
        if order_id in self.orders:
            deleted_order = self.orders.pop(order_id)
            print(f'üóëÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –≤–∏–¥–∞–ª–µ–Ω–æ.')
        else:
            print(f'‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID {order_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ.')

    def display_all_orders(self):   # –ú–µ—Ç–æ–¥ —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
        print('\n--- –°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å ---')
        if not self.orders:
            print('–ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î.')
            return
        for order in self.orders.values():
            print(order)
        print("\n----------------------")

    def get_order_cost(self, order_id: int) -> float | None:    # –ú–µ—Ç–æ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ ID.
        order = self.find_order(order_id)
        if order:
            return order.get_cost()
        else:
            print(f'‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID {order_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ.')
            return None

# --- –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
print('--- –ü–æ—á–Ω–µ–º–æ)) ---')
taxi_system = OrderManager(base_rate=50.0)

client1 = Client('–î–æ–Ω–∞–ª—å–¥ –¢—Ä–∞–º–ø')
client2 = Client('–Ü–ª–æ–Ω –ú–∞—Å–∫')

print('\n--- –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å ---')
order1 = taxi_system.add_order(client1, '–í—É–ª. –°–≤–æ–±–æ–¥–∏, 10', '–ü—Ä. –ü–µ—Ä–µ–º–æ–≥–∏, 5', CarType.STANDARD)
order2 = taxi_system.add_order(client2, '–ú–∞–π–¥–∞–Ω –ù–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ', '–í—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 25', CarType.PREMIUM)
order3 = taxi_system.add_order(client1, '–ó–∞–ª—ñ–∑–Ω–∏—á–Ω–∏–π –≤–æ–∫–∑–∞–ª', '–ê–µ—Ä–æ–ø–æ—Ä—Ç –ë–æ—Ä–∏—Å–ø—ñ–ª—å', CarType.VAN)
taxi_system.display_all_orders()

print('\n--- –î–æ—Å—Ç—É–ø –¥–æ –≤–∞—Ä—Ç–æ—Å—Ç—ñ (—á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –∞–±–æ –æ–±\'—î–∫—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è) ---')
print(f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order1.order_id} (–∑ –æ–±\'—î–∫—Ç–∞): {order1.get_cost():.2f} –≥—Ä–Ω')
print(f'–í–∞—Ä—Ç—ñ—Å—Ç—å –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order2.order_id} (–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞): {taxi_system.get_order_cost(order2.order_id):.2f} –≥—Ä–Ω')

print('\n--- –ó–º—ñ–Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ---')
taxi_system.change_order(order1.order_id, new_destination='–í—É–ª. –®–µ–≤—á–µ–Ω–∫–∞, 1')
taxi_system.change_order(order2.order_id, new_car_type=CarType.VAN)
taxi_system.change_order(99, new_pickup='–ë–∞–∂–∞–Ω–∞, 7')
taxi_system.display_all_orders()

print('\n--- –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ---')
taxi_system.delete_order(order3.order_id)
taxi_system.delete_order(99)
taxi_system.display_all_orders()