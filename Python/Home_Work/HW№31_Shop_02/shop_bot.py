import telebot  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ pyTelegramBotAPI
from telebot import types
from shop_manager import ShopManager

TOKEN ='7054259200:AAFVaeLLmC4NtGv5aPbZawgRVYn0cHr1MWs' # –º—ñ–π —Ç–æ–∫–µ–Ω :)
#name: ¬´–ú–∞–≥–∞–∑–∏–Ω¬ª
#bot: @magazin_HW_bot

if not TOKEN:
    print('–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ "@magazin_HW_bot".')
    print('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—ó –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.')
    exit(1)

bot = telebot.TeleBot(TOKEN)

shop_manager = ShopManager()    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω—É

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä ---

def create_main_reply_keyboard() -> types.ReplyKeyboardMarkup:
    """–ú–µ—Ç–æ–¥, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –≥–æ–ª–æ–≤–Ω—É Reply –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏ –º–µ–Ω—é."""
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn_catalog = types.KeyboardButton('üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥')
    btn_cart = types.KeyboardButton('üõí –ö–æ—à–∏–∫')
    btn_orders = types.KeyboardButton('üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
    btn_help = types.KeyboardButton('‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞')
    markup.add(btn_catalog, btn_cart, btn_orders, btn_help)
    return markup


def create_categories_markup() -> types.InlineKeyboardMarkup:
    """–ú–µ—Ç–æ–¥, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ —Ç–æ–≤–∞—Ä—ñ–≤."""
    markup = types.InlineKeyboardMarkup()
    categories = shop_manager.get_categories()
    for category in categories:
        markup.add(types.InlineKeyboardButton(text=f'üìÑ {category}', callback_data=f'cat:{category}'))
    return markup

def create_products_markup(category_name: str) -> types.InlineKeyboardMarkup:
    """–ú–µ—Ç–æ–¥, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ç–æ–≤–∞—Ä–∞–º–∏ –ø–µ–≤–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó."""
    markup = types.InlineKeyboardMarkup()
    products = shop_manager.get_products_by_category(category_name)

    if not products:
        markup.add(types.InlineKeyboardButton(text='–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ —É —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.', callback_data='ignore'))
    else:
        for product in products:
             button_text = f'üõçÔ∏è "{product.name}" - {product.price:.2f} –≥—Ä–Ω.'
             markup.add(types.InlineKeyboardButton(text=button_text, callback_data=f'prod:{product.id}'))

    markup.add(types.InlineKeyboardButton(text='‚Üê –î–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π', callback_data='back_to_cats'))  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"
    return markup

def create_product_details_markup(product_id: int) -> types.InlineKeyboardMarkup:
    """–ú–µ—Ç–æ–¥, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ç–æ–≤–∞—Ä—É (–¥–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫)."""
    markup = types.InlineKeyboardMarkup()
    product = shop_manager.get_product_by_id(product_id)
    if not product:
        markup.add(types.InlineKeyboardButton(text='–ü–æ–º–∏–ª–∫–∞: –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', callback_data='ignore'))
        return markup

    markup.add(types.InlineKeyboardButton(text='üõí –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫', callback_data=f'add:{product_id}'))
    markup.add(types.InlineKeyboardButton(text='‚Üê –î–æ –∫–∞—Ç–∞–ª–æ–≥—É', callback_data='back_to_cats'))
    return markup

def create_cart_markup(chat_id: int) -> types.InlineKeyboardMarkup:
    """–ú–µ—Ç–æ–¥, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∫–æ—à–∏–∫–∞ (–≤–∏–¥–∞–ª–∏—Ç–∏, –æ—Ñ–æ—Ä–º–∏—Ç–∏)."""
    markup = types.InlineKeyboardMarkup()
    cart = shop_manager.get_cart(chat_id)

    if not cart.items:
        return markup

    markup.add(types.InlineKeyboardButton(text='--- –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏ ---', callback_data='ignore'))
    for item in cart.get_items():
        button_text = f'‚ùå "{item.product.name}" ({item.quantity} —à—Ç.)'
        markup.add(types.InlineKeyboardButton(text=button_text, callback_data=f'remove:{item.product.id}'))

    markup.add(types.InlineKeyboardButton(text='‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data='checkout'))
    markup.add(types.InlineKeyboardButton(text='‚Üê –î–æ –∫–∞—Ç–∞–ª–æ–≥—É', callback_data='back_to_cats'))
    return markup

def get_welcome_message(user_name: str) -> str:
     """–ú–µ—Ç–æ–¥, —è–∫–∏–π —Ñ–æ—Ä–º—É—î —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
     return f"""
–ü—Ä–∏–≤—ñ—Ç, {user_name}! –Ø –±–æ—Ç-"–ú–∞–≥–∞–∑–∏–Ω".
–¢–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥, –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –≤ –∫–æ—à–∏–∫ —Ç–∞ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.

–ü–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è:
register;–Ü–º'—è;–¢–µ–ª–µ—Ñ–æ–Ω;–ê–¥—Ä–µ—Å–∞
(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `register;–Ü–≤–∞–Ω;0991234567;–ö–∏—ó–≤, –≤—É–ª. –¢–µ—Å—Ç–æ–≤–∞ 1`)

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂—á–µ, —â–æ–± –∫–µ—Ä—É–≤–∞—Ç–∏ –º–Ω–æ—é üëá
"""

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@bot.message_handler(commands=['start', 'help'])
def send_welcome_command(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name if message.from_user else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'
    bot.send_message(chat_id, get_welcome_message(user_name), reply_markup=create_main_reply_keyboard(), parse_mode='Markdown')

@bot.message_handler(commands=['register'])
def register_user_command(message):
    chat_id = message.chat.id
    # –†–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–µ—Ä—à—É —á–∞—Å—Ç–∏–Ω—É (–∫–æ–º–∞–Ω–¥—É), –±–µ—Ä–µ–º–æ —Ä–µ—à—Ç—É.
    # –û—á—ñ–∫—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç: register;–Ü–º'—è;–¢–µ–ª–µ—Ñ–æ–Ω;–ê–¥—Ä–µ—Å–∞
    # –Ø–∫—â–æ —Ç–µ–∫—Å—Ç = "register", parts –±—É–¥–µ –ø–æ—Ä–æ–∂–Ω—ñ–º —Å–ø–∏—Å–∫–æ–º –ø—ñ—Å–ª—è [1:]
    parts = message.text.split(';')[1:]

    if len(parts) == 3:
        name, phone, address = [p.strip() for p in parts]
        if shop_manager.register_user(chat_id, name, phone, address):
            bot.send_message(chat_id, f'–í—ñ—Ç–∞—î–º–æ, {name}! –¢–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π.')
        else:
            bot.send_message(chat_id, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.')
    else:
        bot.send_message(chat_id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ñ–æ—Ä–º–∞—Ç: `register;–Ü–º\'—è;–¢–µ–ª–µ—Ñ–æ–Ω;–ê–¥—Ä–µ—Å–∞`', parse_mode='Markdown')
        bot.send_message(chat_id, '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂—á–µ:', reply_markup=create_main_reply_keyboard())


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ Reply Keyboard ---

@bot.message_handler(func=lambda message: message.text == 'üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥' and message.content_type == 'text')
def show_catalog_button(message):
    chat_id = message.chat.id
    markup = create_categories_markup()
    bot.send_message(chat_id, '–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤:', reply_markup=markup) # –ù–∞–¥—Å–∏–ª–∞—î–º–æ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, Reply –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏—Ö–æ–≤—É—î—Ç—å—Å—è

@bot.message_handler(func=lambda message: message.text == 'üõí –ö–æ—à–∏–∫' and message.content_type == 'text')
def show_cart_button(message):
    chat_id = message.chat.id
    cart = shop_manager.get_cart(chat_id)
    markup = create_cart_markup(chat_id) # –¶–µ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∫–æ—à–∏–∫–∞

    if not cart.items:
        # –Ø–∫—â–æ –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É Reply –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        bot.send_message(chat_id, '–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π —â–æ—Å—å –∑ –ö–∞—Ç–∞–ª–æ–≥—É!', reply_markup=create_main_reply_keyboard())
    else:
        # –Ø–∫—â–æ –∫–æ—à–∏–∫ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≤–º—ñ—Å—Ç –∑ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –∫–æ—à–∏–∫–∞
        bot.send_message(chat_id, f'–í–∞—à –∫–æ—à–∏–∫:\n{cart}', reply_markup=markup) # –ù–∞–¥—Å–∏–ª–∞—î–º–æ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, Reply –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏—Ö–æ–≤—É—î—Ç—å—Å—è

@bot.message_handler(func=lambda message: message.text == 'üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' and message.content_type == 'text')
def show_orders_button(message):
    chat_id = message.chat.id
    orders = shop_manager.get_user_orders(chat_id)

    if not orders:
        bot.send_message(chat_id, '–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.', reply_markup=create_main_reply_keyboard()) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    else:
        orders_text = 'üì¶ "–í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:"\n\n' + '\n---\n'.join(str(order) for order in orders)
        bot.send_message(chat_id, orders_text, reply_markup=create_main_reply_keyboard()) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É

@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞' and message.content_type == 'text')
def send_help_button(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name if message.from_user else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'
    bot.send_message(chat_id, get_welcome_message(user_name), reply_markup=create_main_reply_keyboard(), parse_mode='Markdown')


# --- –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ (Callback Query) ---

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id # ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –¥–æ —è–∫–æ–≥–æ –ø—Ä–∏–≤'—è–∑–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞
    callback_data = call.data

    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ callback
    def answer_callback(text: str = None, show_alert: bool = False):
        try:
            bot.answer_callback_query(call.id, text=text, show_alert=show_alert)
        except Exception as e:
            print(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ callback query {call.id}: {e}')


    if callback_data == 'ignore':
        answer_callback('–î—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.')
        return

    # –û–±—Ä–æ–±–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É
    if callback_data.startswith('cat:'):
        category_name = callback_data.split(':', 1)[1]
        markup = create_products_markup(category_name)
        text = f'–¢–æ–≤–∞—Ä–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "{category_name}":'
        try:
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=markup)
            answer_callback()
        except telebot.apihelper.ApiTelegramException as e:
             print(f'–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –¥–ª—è {chat_id}: {e}')
             answer_callback('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ –º–µ–Ω—é.')
             bot.send_message(chat_id, '–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤:', reply_markup=create_categories_markup())


    elif callback_data.startswith('prod:'):
        try:
            product_id = int(callback_data.split(':', 1)[1])
            product = shop_manager.get_product_by_id(product_id)
            if product:
                markup = create_product_details_markup(product_id)
                text = f'üõçÔ∏è "{product.name}"\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: "{product.category}"\n–¶—ñ–Ω–∞: {product.price:.2f} –≥—Ä–Ω.'
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=markup)
                answer_callback()
            else:
                 bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ü–æ–º–∏–ª–∫–∞: –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
                 answer_callback('–ü–æ–º–∏–ª–∫–∞: –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
        except (ValueError, IndexError) as e:
             print(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ prod callback {callback_data}: {e}')
             answer_callback('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ç–æ–≤–∞—Ä—É.')
        except telebot.apihelper.ApiTelegramException as e:
             print(f'–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –¥–ª—è {chat_id}: {e}')
             answer_callback('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ –º–µ–Ω—é.')


    elif callback_data == 'back_to_cats':
        markup = create_categories_markup()
        try:
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤:', reply_markup=markup)
            answer_callback() # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –±–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        except telebot.apihelper.ApiTelegramException as e:
             print(f'–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –¥–ª—è {chat_id}: {e}')
             answer_callback('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ –º–µ–Ω—é.')
             bot.send_message(chat_id, '–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤:', reply_markup=create_categories_markup())


    # –û–±—Ä–æ–±–∫–∞ –¥—ñ–π –∑ –∫–æ—à–∏–∫–æ–º
    elif callback_data.startswith('add:'):
        try:
            product_id = int(callback_data.split(':', 1)[1])
            added_product = shop_manager.add_to_cart(chat_id, product_id, quantity=1)
            if added_product:
                answer_callback(f'üéâ –¢–æ–≤–∞—Ä "{added_product.name}" –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞.')
            else:
                answer_callback('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É.', show_alert=True)
        except (ValueError, IndexError) as e:
             print(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ add callback {callback_data}: {e}')
             answer_callback('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ.', show_alert=True)

    elif callback_data.startswith('remove:'):
        try:
            product_id = int(callback_data.split(':', 1)[1])
            removed_product = shop_manager.remove_from_cart(chat_id, product_id)
            if removed_product:
                answer_callback(f'üóëÔ∏è –¢–æ–≤–∞—Ä "{removed_product.name}" –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞.')

                cart = shop_manager.get_cart(chat_id)
                markup = create_cart_markup(chat_id)

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—à–∏–∫ —Å—Ç–∞–≤ –ø–æ—Ä–æ–∂–Ω—ñ–º
                if not cart.items:
                    # –Ø–∫—â–æ –∫–æ—à–∏–∫ —Å—Ç–∞–≤ –ø–æ—Ä–æ–∂–Ω—ñ–º, —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
                    text = '–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π —â–æ—Å—å –∑ –ö–∞—Ç–∞–ª–æ–≥—É!'
                    try:
                         bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=None)
                         bot.send_message(chat_id, '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂—á–µ:', reply_markup=create_main_reply_keyboard())
                    except telebot.apihelper.ApiTelegramException as e:
                         print(f'–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ {message_id} –¥–ª—è {chat_id}: {e}')
                         bot.send_message(chat_id, text, reply_markup=create_main_reply_keyboard())

                else:
                    text = f'–í–∞—à –∫–æ—à–∏–∫:\n{cart}'
                    try:
                        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=markup)
                    except telebot.apihelper.ApiTelegramException as e:
                        print(f'–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ {message_id} –¥–ª—è {chat_id}: {e}')
                        bot.send_message(chat_id, text, reply_markup=markup)

            else:
                answer_callback('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É.', show_alert=True)
        except (ValueError, IndexError) as e:
             print(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ remove callback {callback_data}: {e}')
             answer_callback('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ.', show_alert=True)


    elif callback_data == 'checkout':
        user = shop_manager.get_user(chat_id)

        if not user.is_registered:
            answer_callback('–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å (register) –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.', show_alert=True)
            bot.send_message(chat_id, '–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: `register;–Ü–º\'—è;–¢–µ–ª–µ—Ñ–æ–Ω;–ê–¥—Ä–µ—Å–∞`', parse_mode='Markdown')
            return

        cart = shop_manager.get_cart(chat_id)
        if not cart.items:
             answer_callback('–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º.', show_alert=True)
             try:
                 bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π —â–æ—Å—å –∑ –ö–∞—Ç–∞–ª–æ–≥—É!', reply_markup=None)
             except Exception:
                 pass
             bot.send_message(chat_id, '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂—á–µ:', reply_markup=create_main_reply_keyboard())
             return

        order = shop_manager.place_order(chat_id) # –û—Ñ–æ—Ä–º–ª—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –æ—á–∏—â–∞—î–º–æ –∫–æ—à–∏–∫

        if order:
            answer_callback(f'–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.id} —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!')

            # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            confirmation_text = f'üéâ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.id} —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n\n{order}'
            try:
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=confirmation_text, reply_markup=None) # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∫–æ—à–∏–∫–∞
            except telebot.apihelper.ApiTelegramException as e:
                 print(f'–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ {message_id} –¥–ª—è {chat_id} –ø—ñ—Å–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è: {e}')
                 bot.send_message(chat_id, confirmation_text, reply_markup=None)

            bot.send_message(chat_id, '–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá', reply_markup=create_main_reply_keyboard())

        else:
            answer_callback('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.', show_alert=True)


# --- –û–±—Ä–æ–±–Ω–∏–∫ —ñ–Ω—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
@bot.message_handler(func=lambda message: message.content_type == 'text' and
                                         message.text not in ['üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥', 'üõí –ö–æ—à–∏–∫', 'üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞'] and
                                         not message.text.startswith('/') # –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏, –≤–æ–Ω–∏ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è —ñ–Ω—à–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
)
def handle_other_messages(message):
     chat_id = message.chat.id
     bot.send_message(chat_id, '–Ø –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá', reply_markup=create_main_reply_keyboard())


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
print('–ë–æ—Ç –ú–∞–≥–∞–∑–∏–Ω –∑–∞–ø—É—â–µ–Ω–æ...')
bot.polling(none_stop=True)