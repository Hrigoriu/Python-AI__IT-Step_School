import telebot  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ pyTelegramBotAPI
from telebot import types
from tictactoe_game_01 import TicTacToeGame  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à –∫–ª–∞—Å –≥—Ä–∏

TOKEN ='7052289932:AAFGphvPUSHdSMjZfqHTy3iE6ODWSzTjC8A' # –º—ñ–π —Ç–æ–∫–µ–Ω :)
#name: ¬´–•—Ä–µ—Å—Ç–∏–∫–∏-–ù—É–ª–∏–∫–∏¬ª
#bot: @tictactoe_HW_bot

if not TOKEN:
    print('–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ "@tictactoe_HW_bot"!')
    print('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—ó –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.')
    exit(1)

bot = telebot.TeleBot(TOKEN)

# --- –°—Ç–∞–Ω –±–æ—Ç–∞ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —ñ–≥—Ä–∞–º–∏ —Ç–∞ –≥—Ä–∞–≤—Ü—è–º–∏ ---

# –ì—Ä–∞–≤–µ—Ü—å, —è–∫–∏–π –æ—á—ñ–∫—É—î –Ω–∞ –ø–∞—Ä—É. –ó–±–µ—Ä—ñ–≥–∞—î chat_id.
waiting_player: int | None = None

""" 
# –ê–∫—Ç–∏–≤–Ω—ñ —ñ–≥—Ä–∏. 
–ö–ª—é—á: chat_id –≥—Ä–∞–≤—Ü—è X (—Ü–µ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≥—Ä–∏),
–ó–Ω–∞—á–µ–Ω–Ω—è: —Å–ª–æ–≤–Ω–∏–∫ –∑—ñ —Å—Ç–∞–Ω–æ–º –≥—Ä–∏:
 {'instance': TicTacToeGame object,
  'players': {chat_id_X: 'X', chat_id_O: 'O'},
  'current_turn_id': chat_id –≥—Ä–∞–≤—Ü—è, —á–∏–π —Ö—ñ–¥,
  'message_ids': {chat_id_X: board_message_id_for_X, chat_id_O: board_message_id_for_O}
 }
"""
active_games: dict[int, dict] = {}

# –ó–≤–æ—Ä–æ—Ç–Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è: chat_id –≥—Ä–∞–≤—Ü—è -> chat_id –≥—Ä–∞–≤—Ü—è X (—Ç–æ–±—Ç–æ game_id)
player_to_game: dict[int, int] = {}

def create_board_markup(game_id: int, board: list[list[str]]) -> types.InlineKeyboardMarkup:    #–ú–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –¥–æ—à–∫—É.
    markup = types.InlineKeyboardMarkup()
    for r_idx, row in enumerate(board):
        buttons = []
        for c_idx, cell in enumerate(row):
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–º—ñ—Å—Ç –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∞–±–æ –ø—Ä–æ–±—ñ–ª, —è–∫—â–æ –ø–æ—Ä–æ–∂–Ω—å–æ
            button_text = cell if cell != ' ' else '‚ãÖ'      # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ '‚ãÖ' –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–æ—Ä–æ–∂–Ω—ñ—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫
            callback_data = f"{game_id}:{r_idx}:{c_idx}"    # callback_data –≤–∫–ª—é—á–∞—î game_id, —Ä—è–¥–æ–∫ —Ç–∞ —Å—Ç–æ–≤–ø–µ—Ü—å
            buttons.append(types.InlineKeyboardButton(text=button_text, callback_data=callback_data))
        markup.add(*buttons)  # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —Ä—è–¥–∫–æ–º
    return markup


def send_or_update_board(chat_id: int, game_id: int):   #–ú–µ—Ç–æ–¥, —è–∫–∏–π –Ω–∞–¥—Å–∏–ª–∞—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–æ—à–∫–∏ –¥–æ –≥—Ä–∞–≤—Ü—è.
    game_state = active_games[game_id]
    game_instance = game_state['instance']
    board = game_instance.get_board()
    message_id = game_state['message_ids'].get(chat_id)
    current_turn_id = game_state['current_turn_id']
    player_x_id = list(game_state['players'].keys())[0]  # –û—Ç—Ä–∏–º—É—î–º–æ id –≥—Ä–∞–≤—Ü—è X
    player_o_id = list(game_state['players'].keys())[1]  # –û—Ç—Ä–∏–º—É—î–º–æ id –≥—Ä–∞–≤—Ü—è O

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω—ñ–∫–Ω–µ–π–º–∏ –≥—Ä–∞–≤—Ü—ñ–≤ (–∞–±–æ –ø—Ä–æ—Å—Ç–æ X/O)
    player_x_name = bot.get_chat(player_x_id).first_name if player_x_id else '–ì—Ä–∞–≤–µ—Ü—å X'
    player_o_name = bot.get_chat(player_o_id).first_name if player_o_id else '–ì—Ä–∞–≤–µ—Ü—å O'

    text = f'–ì—Ä–∞ #{game_id}\n'
    text += f' "{game_state["players"][player_x_id]}": {player_x_name}\n'
    text += f' "{game_state["players"][player_o_id]}": {player_o_name}\n\n'

    if game_instance.is_game_over():
        winner_mark = None
        for mark in ['X', 'O']:
            if game_instance.check_win(mark):
                winner_mark = mark
                break

        if winner_mark:
            winner_name = player_x_name if game_state['players'][player_x_id] == winner_mark else player_o_name
            text += f'‚ú® –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞! –ü–µ—Ä–µ–º—ñ–≥ –≥—Ä–∞–≤–µ—Ü—å "{winner_mark}" ({winner_name})! ‚ú®'
        elif game_instance.check_draw():
            text += 'ü§ù –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞! –ù—ñ—á–∏—è! ü§ù'
        else:
            text += '‚ùó –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞. –ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.'

        # –ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏ –∫–Ω–æ–ø–∫–∏ —Ä–æ–±–∏–º–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–º–∏
        markup = create_board_markup(game_id, board)
        for row_buttons in markup.keyboard:
            for button in row_buttons:
                button.callback_data = 'game_over'

    else:
        current_player_name = player_x_name if current_turn_id == player_x_id else player_o_name
        current_player_mark = game_state['players'][current_turn_id]
        text += f'‚è≥ –•—ñ–¥ –≥—Ä–∞–≤—Ü—è "{current_player_mark}" ({current_player_name}).'
        markup = create_board_markup(game_id, board)

    try:
        if message_id:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                reply_markup=markup
            )
        else:
            msg = bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=markup
            )
            game_state['message_ids'][chat_id] = msg.message_id
    except telebot.apihelper.ApiTelegramException as e:
        print(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –¥–æ—à–∫–∏ –¥–ª—è {chat_id}: {e}')


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):  # –ú–µ—Ç–æ–¥, —è–∫–∏–π –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ–º–∞–Ω–¥–∏ /start —Ç–∞ /help
    chat_id = message.chat.id
    user_name = message.from_user.first_name if message.from_user else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'

    welcome_message = f"""
–ü—Ä–∏–≤—ñ—Ç, {user_name}! –Ø –±–æ—Ç "–•—Ä–µ—Å—Ç–∏–∫–∏-–ù—É–ª–∏–∫–∏".
–¢–∏ –º–æ–∂–µ—à –∑—ñ–≥—Ä–∞—Ç–∏ –∑—ñ —Å–≤–æ—ó–º –¥—Ä—É–≥–æ–º –ø—Ä—è–º–æ —Ç—É—Ç!

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥—É /play, —â–æ–± –∑–Ω–∞–π—Ç–∏ —Å—É–ø–µ—Ä–Ω–∏–∫–∞ —ñ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É –≥—Ä—É.
"""
    bot.send_message(chat_id, welcome_message)


@bot.message_handler(commands=['play'])
def find_player(message):   # –ú–µ—Ç–æ–¥, —è–∫–∏–π —à—É–∫–∞—î –ø–∞—Ä—É —Ç–∞ —Å—Ç–∞–≤–∏—Ç—å —É —á–µ—Ä–≥—É
    chat_id = message.chat.id

    if chat_id in player_to_game:
        bot.send_message(chat_id, '–¢–∏ –≤–∂–µ –±–µ—Ä–µ—à —É—á–∞—Å—Ç—å —É –≥—Ä—ñ! üòâ')
        return

    global waiting_player
    if waiting_player is None:
        waiting_player = chat_id
        bot.send_message(chat_id, '–®—É–∫–∞—î–º–æ —Å—É–ø–µ—Ä–Ω–∏–∫–∞... –ó–∞—á–µ–∫–∞–π —ñ–Ω—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è –∞–±–æ –ø–æ–ø—Ä–æ—Å–∏ –¥—Ä—É–≥–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ /play.')
        print(f'–ì—Ä–∞–≤–µ—Ü—å {chat_id} —Å—Ç–∞–≤ —É —á–µ—Ä–≥—É.')
    else:
        player1_id = waiting_player
        player2_id = chat_id

        if player1_id == player2_id:
            bot.send_message(chat_id, '–¢–∏ –≤–∂–µ –≤ —á–µ—Ä–∑—ñ.')
            return
        waiting_player = None

        new_game = TicTacToeGame()
        game_id = player1_id

        import random   # –í–∏–ø–∞–¥–∫–æ–≤–æ –≤–∏–∑–Ω–∞—á–∞—î–º–æ, —Ö—Ç–æ –±—É–¥–µ X, –∞ —Ö—Ç–æ O
        if random.choice([True, False]):
            players = {player1_id: 'X', player2_id: 'O'}
            first_turn_id = player1_id
        else:
            players = {player1_id: 'O', player2_id: 'X'}
            first_turn_id = player2_id

        active_games[game_id] = {
            'instance': new_game,
            'players': players,
            'current_turn_id': first_turn_id,
            'message_ids': {}  # –ë—É–¥—É—Ç—å –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–æ—à–∫–∏
        }
        player_to_game[player1_id] = game_id
        player_to_game[player2_id] = game_id

        print(f'–†–æ–∑–ø–æ—á–∞—Ç–æ –≥—Ä—É {game_id} –º—ñ–∂ {player1_id} —Ç–∞ {player2_id}.')

        send_or_update_board(player1_id, game_id)
        send_or_update_board(player2_id, game_id)

        bot.send_message(player1_id, f'–ó–Ω–∞–π–¥–µ–Ω–æ —Å—É–ø–µ—Ä–Ω–∏–∫–∞! –¢–∏ –≥—Ä–∞—î—à "{players[player1_id]}".')
        bot.send_message(player2_id, f'–ó–Ω–∞–π–¥–µ–Ω–æ —Å—É–ø–µ—Ä–Ω–∏–∫–∞! –¢–∏ –≥—Ä–∞—î—à "{players[player2_id]}".')


@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):    # –ú–µ—Ç–æ–¥, —è–∫–∏–π –æ–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è Inline –∫–Ω–æ–ø–æ–∫.
    chat_id = call.message.chat.id
    callback_data = call.data

    if callback_data == 'game_over':
        bot.answer_callback_query(call.id, '–¶—è –≥—Ä–∞ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        return

    try:
        parts = callback_data.split(':')
        if len(parts) != 3:
            bot.answer_callback_query(call.id, '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏.')
            return

        game_id = int(parts[0])
        row = int(parts[1])
        col = int(parts[2])

    except (ValueError, IndexError):
        bot.answer_callback_query(call.id, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö —Ö–æ–¥—É.')
        return

    if game_id not in active_games:     # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ü—è –≥—Ä–∞
        bot.answer_callback_query(call.id, '–¶—è –≥—Ä–∞ –≤–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.')
        return

    game_state = active_games[game_id]
    game_instance = game_state['instance']
    current_turn_id = game_state['current_turn_id']
    player_mark = game_state['players'].get(chat_id)  # –û—Ç—Ä–∏–º—É—î–º–æ –º–∞—Ä–∫–µ—Ä –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è


    if chat_id != current_turn_id:      # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —Ö—ñ–¥ –≥—Ä–∞–≤—Ü—è, —è–∫–∏–π –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É
        bot.answer_callback_query(call.id, '–ù–µ —Ç–≤—ñ–π —Ö—ñ–¥!')
        return

    if game_instance.make_move(row, col, player_mark):

        players_list = list(game_state['players'].keys())
        other_player_id = players_list[0] if players_list[1] == chat_id else players_list[1]


        if game_instance.check_win(player_mark):    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≥—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞
            send_or_update_board(chat_id, game_id)  # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ—à–∫—É –¥–ª—è –ø–µ—Ä–µ–º–æ–∂—Ü—è
            send_or_update_board(other_player_id, game_id)  # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ—à–∫—É –¥–ª—è –ø—Ä–æ–≥—Ä–∞–≤—à–æ–≥–æ
            bot.answer_callback_query(call.id, '–ü–µ—Ä–µ–º–æ–≥–∞!')
            # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –≥—Ä—É –∑—ñ —Å—Ç–∞–Ω—É
            del active_games[game_id]
            del player_to_game[chat_id]
            del player_to_game[other_player_id]
            print(f'–ì—Ä–∞ {game_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–µ—Ä–µ–º—ñ–≥ {chat_id}.')

        elif game_instance.check_draw():
            # –ù—ñ—á–∏—è!
            send_or_update_board(chat_id, game_id)
            send_or_update_board(other_player_id, game_id)
            bot.answer_callback_query(call.id, '–ù—ñ—á–∏—è!')
            # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –≥—Ä—É –∑—ñ —Å—Ç–∞–Ω—É
            del active_games[game_id]
            del player_to_game[chat_id]
            del player_to_game[other_player_id]
            print(f'–ì—Ä–∞ {game_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù—ñ—á–∏—è.')
        else:
            # –ì—Ä–∞ —Ç—Ä–∏–≤–∞—î, –ø–µ—Ä–µ–¥–∞—î–º–æ —Ö—ñ–¥ —ñ–Ω—à–æ–º—É –≥—Ä–∞–≤—Ü—é
            game_state['current_turn_id'] = other_player_id
            send_or_update_board(chat_id, game_id)  # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ—à–∫—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
            send_or_update_board(other_player_id, game_id)  # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ—à–∫—É –¥–ª—è —ñ–Ω—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è
            bot.answer_callback_query(call.id)  # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è (–±–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
            print(
                f'–ì—Ä–∞ {game_id}. –•—ñ–¥ {player_mark} –Ω–∞ ({row},{col}). –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ö—ñ–¥ {game_state["players"][other_player_id]}.')

    else:   # –•—ñ–¥ –Ω–µ —É—Å–ø—ñ—à–Ω–∏–π (–ø–æ–ª–µ –∑–∞–π–Ω—è—Ç–µ)
        bot.answer_callback_query(call.id, '–¶–µ –ø–æ–ª–µ –≤–∂–µ –∑–∞–π–Ω—è—Ç–µ. –°–ø—Ä–æ–±—É–π —ñ–Ω—à–µ!')


# --- –û–±—Ä–æ–±–Ω–∏–∫ —ñ–Ω—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—ñ–≥–Ω–æ—Ä—É—î–º–æ) ---
# –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏, —è–∫—â–æ —Ö–æ—á–µ—Ç–µ —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –±—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç, —â–æ –Ω–µ —î –∫–æ–º–∞–Ω–¥–æ—é
@bot.message_handler(func=lambda message: True)
def handle_other_messages(message): # –ú–µ—Ç–æ–¥, —â–æ–± —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –±—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç, —â–æ –Ω–µ —î –∫–æ–º–∞–Ω–¥–æ—é
    chat_id = message.chat.id
    if chat_id not in player_to_game and waiting_player != chat_id:
         bot.send_message(chat_id, '–Ø –±–æ—Ç –¥–ª—è –≥—Ä–∏ "–•—Ä–µ—Å—Ç–∏–∫–∏-–ù—É–ª–∏–∫–∏". –ù–∞–ø–∏—à–∏ /play, —â–æ–± –∑—ñ–≥—Ä–∞—Ç–∏!')


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
print('–ë–æ—Ç –•—Ä–µ—Å—Ç–∏–∫–∏-–ù—É–ª–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω–æ...')
# –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è Telegram API
bot.polling(none_stop=True)