import telebot  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ pyTelegramBotAPI
from telebot import types
from tictactoe_game import TicTacToeGame  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à –∫–ª–∞—Å –≥—Ä–∏
import random # –ü–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –≤–∏–±–æ—Ä—É –ø–µ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è

TOKEN ='7052289932:AAFGphvPUSHdSMjZfqHTy3iE6ODWSzTjC8A' # –º—ñ–π —Ç–æ–∫–µ–Ω :)
#name: ¬´–•—Ä–µ—Å—Ç–∏–∫–∏-–ù—É–ª–∏–∫–∏¬ª
#bot: @tictactoe_HW_bot

if not TOKEN:
    print('–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ "@tictactoe_HW_bot"!')
    print('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—ó –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.')
    exit(1)

bot = telebot.TeleBot(TOKEN)

# --- –°—Ç–∞–Ω –±–æ—Ç–∞ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —ñ–≥—Ä–∞–º–∏ —Ç–∞ –≥—Ä–∞–≤—Ü—è–º–∏ ---

# –ì—Ä–∞–≤–µ—Ü—å, —è–∫–∏–π –æ—á—ñ–∫—É—î –Ω–∞ –ø–∞—Ä—É. –ó–±–µ—Ä—ñ–≥–∞—î chat_id.
waiting_player: int | None = None

"""
# –ê–∫—Ç–∏–≤–Ω—ñ —ñ–≥—Ä–∏.
–ö–ª—é—á: chat_id –≥—Ä–∞–≤—Ü—è X (—Ü–µ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≥—Ä–∏),
–ó–Ω–∞—á–µ–Ω–Ω—è: —Å–ª–æ–≤–Ω–∏–∫ –∑—ñ —Å—Ç–∞–Ω–æ–º –≥—Ä–∏:
 {'instance': TicTacToeGame object,
  'players': {chat_id_X: 'X', chat_id_O: 'O'},
  'current_turn_id': chat_id –≥—Ä–∞–≤—Ü—è, —á–∏–π —Ö—ñ–¥,
  'message_ids': {chat_id_X: board_message_id_for_X, chat_id_O: board_message_id_for_O}
 }
"""
active_games: dict[int, dict] = {}

# –ó–≤–æ—Ä–æ—Ç–Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è: chat_id –≥—Ä–∞–≤—Ü—è -> chat_id –≥—Ä–∞–≤—Ü—è X (—Ç–æ–±—Ç–æ game_id)
player_to_game: dict[int, int] = {}

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä ---

def create_main_reply_keyboard():
    """–°—Ç–≤–æ—Ä—é—î –≥–æ–ª–æ–≤–Ω—É Reply –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é '–ó–Ω–∞–π—Ç–∏ —Å—É–ø–µ—Ä–Ω–∏–∫–∞'."""
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    find_button = types.KeyboardButton('–ó–Ω–∞–π—Ç–∏ —Å—É–ø–µ—Ä–Ω–∏–∫–∞')
    markup.add(find_button)
    return markup

def create_board_markup(game_id: int, board: list[list[str]]) -> types.InlineKeyboardMarkup:
    """–ú–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –¥–æ—à–∫—É."""
    markup = types.InlineKeyboardMarkup()
    for r_idx, row in enumerate(board):
        buttons = []
        for c_idx, cell in enumerate(row):
            button_text = cell if cell != ' ' else '‚ãÖ'      # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ '‚ãÖ' –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–æ—Ä–æ–∂–Ω—ñ—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫
            callback_data = f"{game_id}:{r_idx}:{c_idx}"
            buttons.append(types.InlineKeyboardButton(text=button_text, callback_data=callback_data))
        markup.add(*buttons)
    return markup


def send_or_update_board(chat_id: int, game_id: int):
    """–ú–µ—Ç–æ–¥, —è–∫–∏–π –Ω–∞–¥—Å–∏–ª–∞—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–æ—à–∫–∏ –¥–æ –≥—Ä–∞–≤—Ü—è."""
    game_state = active_games.get(game_id)
    if not game_state:
        return

    game_instance = game_state['instance']
    board = game_instance.get_board()
    message_id = game_state['message_ids'].get(chat_id)
    current_turn_id = game_state['current_turn_id']

    # –û—Ç—Ä–∏–º—É—î–º–æ id –≥—Ä–∞–≤—Ü—ñ–≤ X —Ç–∞ O. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ sorted, —â–æ–± –∑–∞–≤–∂–¥–∏ –º–∞—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫,
    player_ids = list(game_state['players'].keys())
    player_x_id = player_ids[0] if game_state['players'][player_ids[0]] == 'X' else player_ids[1]
    player_o_id = player_ids[0] if game_state['players'][player_ids[0]] == 'O' else player_ids[1]


    # –û–±—Ä–æ–±–ª—è—î–º–æ –º–æ–∂–ª–∏–≤—ñ –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ chat_id –≤–∂–µ –Ω–µ –¥—ñ–π—Å–Ω–∏–π
    try:
        player_x_name = bot.get_chat(player_x_id).first_name if player_x_id else '–ì—Ä–∞–≤–µ—Ü—å X'
    except Exception:
        player_x_name = '–ì—Ä–∞–≤–µ—Ü—å X (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)'
    try:
         player_o_name = bot.get_chat(player_o_id).first_name if player_o_id else '–ì—Ä–∞–≤–µ—Ü—å O'
    except Exception:
         player_o_name = '–ì—Ä–∞–≤–µ—Ü—å O (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)'


    text = f'–ì—Ä–∞ #{game_id}\n'
    text += f'"{game_state["players"][player_x_id]}": {player_x_name}\n'
    text += f'"{game_state["players"][player_o_id]}": {player_o_name}\n\n'

    if game_instance.is_game_over():
        winner_mark = None
        for player_id, mark in game_state['players'].items():
             if game_instance.check_win(mark):
                 winner_mark = mark
                 break

        if winner_mark:
            winner_name = player_x_name if game_state['players'][player_x_id] == winner_mark else player_o_name
            text += f'‚ú® –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞! –ü–µ—Ä–µ–º—ñ–≥ –≥—Ä–∞–≤–µ—Ü—å "{winner_mark}" ({winner_name})! ‚ú®'
        elif game_instance.check_draw(): # check_draw —Å–∞–º –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î _is_game_over
            text += 'ü§ù –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞! –ù—ñ—á–∏—è! ü§ù'
        else:
             text += '‚ùó –ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π.'

        # –ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏ –∫–Ω–æ–ø–∫–∏ —Ä–æ–±–∏–º–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–º–∏ –∞–±–æ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ
        markup = create_board_markup(game_id, board)
        for row_buttons in markup.keyboard:
            for button in row_buttons:
                button.callback_data = 'game_over' # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π callback
        markup = None


    else:
        current_player_name = player_x_name if current_turn_id == player_x_id else player_o_name
        current_player_mark = game_state['players'][current_turn_id]
        text += f'‚è≥ –•—ñ–¥ –≥—Ä–∞–≤—Ü—è "{current_player_mark}" ({current_player_name}).'
        markup = create_board_markup(game_id, board)

    try:
        if message_id:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                reply_markup=markup # –¶–µ inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–æ—à–∫–∏
            )
        else:
            msg = bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=markup, # –¶–µ inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–æ—à–∫–∏
                parse_mode='Markdown'
            )
            game_state['message_ids'][chat_id] = msg.message_id
    except telebot.apihelper.ApiTelegramException as e:
        print(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –¥–æ—à–∫–∏ –¥–ª—è {chat_id}: {e}')
        if message_id:
             try:
                  bot.delete_message(chat_id, message_id)
             except Exception:
                  pass

             try:
                  msg = bot.send_message(
                      chat_id=chat_id,
                      text=text,
                      reply_markup=markup,
                      parse_mode='Markdown'
                  )
                  game_state['message_ids'][chat_id] = msg.message_id
             except Exception as e2:
                  print(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {chat_id}: {e2}')


def end_game_for_players(game_id: int):
    """–í–∏–¥–∞–ª—è—î –≥—Ä—É –∑—ñ —Å—Ç–∞–Ω—É —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª—è—î –≥—Ä–∞–≤—Ü—ñ–≤, –ø–æ–≤–µ—Ä—Ç–∞—é—á–∏ –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É."""
    game_state = active_games.get(game_id)
    if not game_state:
        return

    players_to_notify = list(game_state['players'].keys())

    del active_games[game_id]
    for player_id in players_to_notify:
        if player_id in player_to_game:
             del player_to_game[player_id]

    print(f'–ì—Ä–∞ {game_id} –≤–∏–¥–∞–ª–µ–Ω–∞ –∑—ñ —Å—Ç–∞–Ω—É.')

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≥—Ä–∞–≤—Ü—è–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–∞ –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    finish_message = '–ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—î—é –∑—ñ–≥—Ä–∞—Ç–∏ —â–µ —Ä–∞–∑
    prompt_new_game_text = '–©–æ–± –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å—É–ø–µ—Ä–Ω–∏–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá'
    main_keyboard = create_main_reply_keyboard()

    for player_id in players_to_notify:
         try:
              bot.send_message(player_id, prompt_new_game_text, reply_markup=main_keyboard)
         except Exception as e:
              print(f'–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—é {player_id} –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏: {e}')


# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ—à—É–∫—É –≥—Ä–∞–≤—Ü—è (—Å–ø—ñ–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ —ñ –∫–Ω–æ–ø–∫–∏) ---

def _handle_find_player_action(chat_id: int):
    """–û–±—Ä–æ–±–ª—è—î –ª–æ–≥—ñ–∫—É –ø–æ—à—É–∫—É –∞–±–æ —á–µ—Ä–≥–∏ –≥—Ä–∞–≤—Ü—è."""
    global waiting_player

    if chat_id in player_to_game:
        bot.send_message(chat_id, '–¢–∏ –≤–∂–µ –±–µ—Ä–µ—à —É—á–∞—Å—Ç—å —É –≥—Ä—ñ! üòâ')
        return

    if waiting_player is None:
        waiting_player = chat_id
        bot.send_message(chat_id, '–®—É–∫–∞—î–º–æ —Å—É–ø–µ—Ä–Ω–∏–∫–∞... –ó–∞—á–µ–∫–∞–π —ñ–Ω—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è –∞–±–æ –ø–æ–ø—Ä–æ—Å–∏ –¥—Ä—É–≥–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ play –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ "–ó–Ω–∞–π—Ç–∏ —Å—É–ø–µ—Ä–Ω–∏–∫–∞".')
        print(f'–ì—Ä–∞–≤–µ—Ü—å {chat_id} —Å—Ç–∞–≤ —É —á–µ—Ä–≥—É.')
    else:
        player1_id = waiting_player
        player2_id = chat_id

        if player1_id == player2_id:
            bot.send_message(chat_id, '–¢–∏ –≤–∂–µ –≤ —á–µ—Ä–∑—ñ –Ω–∞ –ø–æ—à—É–∫ —Å—É–ø–µ—Ä–Ω–∏–∫–∞.')
            return

        waiting_player = None # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è –∑ —á–µ—Ä–≥–∏

        game_id = player1_id    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ chat_id –≥—Ä–∞–≤—Ü—è X —è–∫ ID –≥—Ä–∏

        new_game = TicTacToeGame()

        players = {}
        if random.choice([True, False]):
            players[player1_id] = 'X'
            players[player2_id] = 'O'
            first_turn_id = player1_id
        else:
            players[player1_id] = 'O'
            players[player2_id] = 'X'
            first_turn_id = player2_id

        active_games[game_id] = {
            'instance': new_game,
            'players': players,
            'current_turn_id': first_turn_id,
            'message_ids': {}  # –ë—É–¥—É—Ç—å –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–æ—à–∫–∏
        }
        player_to_game[player1_id] = game_id
        player_to_game[player2_id] = game_id

        print(f'–†–æ–∑–ø–æ—á–∞—Ç–æ –≥—Ä—É {game_id} –º—ñ–∂ {player1_id} —Ç–∞ {player2_id}. X={player1_id if players[player1_id]=="X" else player2_id}, O={player1_id if players[player1_id]=="O" else player2_id}. –ü–µ—Ä—à–∏–π —Ö—ñ–¥: {first_turn_id}.')

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –¥–æ—à–∫–∏ –æ–±–æ–º –≥—Ä–∞–≤—Ü—è–º, –ø—Ä–∏–±–∏—Ä–∞—é—á–∏ Reply –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        send_or_update_board(player1_id, game_id)
        send_or_update_board(player2_id, game_id)


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name if message.from_user else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'

    welcome_message = f"""
–ü—Ä–∏–≤—ñ—Ç, {user_name}! –Ø –±–æ—Ç "–•—Ä–µ—Å—Ç–∏–∫–∏-–ù—É–ª–∏–∫–∏".
–¢–∏ –º–æ–∂–µ—à –∑—ñ–≥—Ä–∞—Ç–∏ –∑—ñ —Å–≤–æ—ó–º –¥—Ä—É–≥–æ–º –ø—Ä—è–º–æ —Ç—É—Ç!

–©–æ–± –ø–æ—á–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É "–ó–Ω–∞–π—Ç–∏ —Å—É–ø–µ—Ä–Ω–∏–∫–∞" –Ω–∏–∂—á–µ –∞–±–æ –Ω–∞–ø–∏—à–∏ /play.
"""
    bot.send_message(chat_id, welcome_message, reply_markup=create_main_reply_keyboard())


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /play
@bot.message_handler(commands=['play'])
def handle_play_command(message):
    _handle_find_player_action(message.chat.id)

# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ó–Ω–∞–π—Ç–∏ —Å—É–ø–µ—Ä–Ω–∏–∫–∞"
@bot.message_handler(func=lambda message: message.text == '–ó–Ω–∞–π—Ç–∏ —Å—É–ø–µ—Ä–Ω–∏–∫–∞' and message.content_type == 'text')
def handle_find_button(message):
    _handle_find_player_action(message.chat.id)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ stopgame
@bot.message_handler(commands=['stopgame'])
def stop_game_command(message, waiting_player=None):
    chat_id = message.chat.id

    if chat_id in player_to_game:
        game_id = player_to_game[chat_id]
        game_state = active_games.get(game_id)
        if game_state:
             players_in_game = list(game_state['players'].keys())
             partner_id = players_in_game[0] if players_in_game[1] == chat_id else players_in_game[1]

             # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –æ–±–æ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
             bot.send_message(chat_id, '–í–∏ –ø–æ–∫–∏–Ω—É–ª–∏ –≥—Ä—É.')
             try:
                  bot.send_message(partner_id, '–í–∞—à —Å—É–ø–µ—Ä–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–≤ –≥—Ä—É.')
             except Exception as e:
                  print(f'–ü–æ–º–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ {partner_id} –ø—Ä–æ –≤–∏—Ö—ñ–¥: {e}')

             # –ó–∞–≤–µ—Ä—à—É—î–º–æ –≥—Ä—É —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
             end_game_for_players(game_id)

        elif chat_id in player_to_game:
            del player_to_game[chat_id]
            bot.send_message(chat_id, '–ì—Ä–∞ –±—É–ª–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –í–∏ –≤–∏–π—à–ª–∏ –∑—ñ —Å—Ç–∞–Ω—É –≥—Ä–∏.', reply_markup=create_main_reply_keyboard())


    elif waiting_player == chat_id:
        waiting_player = None
        bot.send_message(chat_id, '–í–∏ –ø–æ–∫–∏–Ω—É–ª–∏ —á–µ—Ä–≥—É –ø–æ—à—É–∫—É —Å—É–ø–µ—Ä–Ω–∏–∫–∞.', reply_markup=create_main_reply_keyboard())
        print(f'–ì—Ä–∞–≤–µ—Ü—å {chat_id} –∑–∞–ª–∏—à–∏–≤ —á–µ—Ä–≥—É —á–µ—Ä–µ–∑ stopgame.')

    else:
        bot.send_message(chat_id, '–í–∏ –∑–∞—Ä–∞–∑ –Ω–µ –≤ –≥—Ä—ñ —ñ –Ω–µ –æ—á—ñ–∫—É—î—Ç–µ –Ω–∞ —Å—É–ø–µ—Ä–Ω–∏–∫–∞.', reply_markup=create_main_reply_keyboard())


@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):    # –ú–µ—Ç–æ–¥, —è–∫–∏–π –æ–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è Inline –∫–Ω–æ–ø–æ–∫.
    chat_id = call.message.chat.id
    callback_data = call.data

    if callback_data == 'game_over':
        bot.answer_callback_query(call.id, '–¶—è –≥—Ä–∞ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        return

    try:
        parts = callback_data.split(':')
        if len(parts) != 3:
            bot.answer_callback_query(call.id, '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏.')
            return

        game_id = int(parts[0])
        row = int(parts[1])
        col = int(parts[2])

    except (ValueError, IndexError):
        bot.answer_callback_query(call.id, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö —Ö–æ–¥—É.')
        return

    if game_id not in active_games:
        bot.answer_callback_query(call.id, '–¶—è –≥—Ä–∞ –≤–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∞–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
        return

    game_state = active_games[game_id]
    game_instance = game_state['instance']
    current_turn_id = game_state['current_turn_id']
    player_mark = game_state['players'].get(chat_id)  # –û—Ç—Ä–∏–º—É—î–º–æ –º–∞—Ä–∫–µ—Ä –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è

    if game_instance.is_game_over(): # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —Ö–æ—á–∞ –∫–Ω–æ–ø–∫–∞ –º–∞—î –±—É—Ç–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
         bot.answer_callback_query(call.id, '–ì—Ä–∞ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
         send_or_update_board(chat_id, game_id) # –ú–æ–∂–µ, –æ–Ω–æ–≤–∏—Ç–∏ –Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫
         return

    if chat_id != current_turn_id:
        bot.answer_callback_query(call.id, '–ù–µ —Ç–≤—ñ–π —Ö—ñ–¥!')
        return

    if game_instance.board[row][col] != ' ':
         bot.answer_callback_query(call.id, '–¶–µ –ø–æ–ª–µ –≤–∂–µ –∑–∞–π–Ω—è—Ç–µ. –°–ø—Ä–æ–±—É–π —ñ–Ω—à–µ!')
         return

    if game_instance.make_move(row, col, player_mark):

        players_list = list(game_state['players'].keys())
        other_player_id = players_list[0] if players_list[1] == chat_id else players_list[1]

        if game_instance.check_win(player_mark):
            # –ü–µ—Ä–µ–º–æ–≥–∞!
            bot.answer_callback_query(call.id, '–ü–µ—Ä–µ–º–æ–≥–∞!')
            send_or_update_board(chat_id, game_id)  # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ—à–∫—É –¥–ª—è –æ–±–æ—Ö
            send_or_update_board(other_player_id, game_id)
            end_game_for_players(game_id) # –ó–∞–≤–µ—Ä—à—É—î–º–æ –≥—Ä—É —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏

        elif game_instance.check_draw():
            bot.answer_callback_query(call.id, '–ù—ñ—á–∏—è!')
            send_or_update_board(chat_id, game_id)
            send_or_update_board(other_player_id, game_id)
            end_game_for_players(game_id) # –ó–∞–≤–µ—Ä—à—É—î–º–æ –≥—Ä—É —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        else:
            game_state['current_turn_id'] = other_player_id
            send_or_update_board(chat_id, game_id)
            send_or_update_board(other_player_id, game_id)
            bot.answer_callback_query(call.id)
            print(f'–ì—Ä–∞ {game_id}. –•—ñ–¥ {player_mark} –Ω–∞ ({row},{col}). –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ö—ñ–¥: {game_state["players"][other_player_id]} ({other_player_id}).')

    else:
        bot.answer_callback_query(call.id, '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—Ä–æ–±–∏—Ç–∏ —Ö—ñ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')


# --- –û–±—Ä–æ–±–Ω–∏–∫ —ñ–Ω—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
@bot.message_handler(func=lambda message: message.content_type == 'text' and message.text not in ['–ó–Ω–∞–π—Ç–∏ —Å—É–ø–µ—Ä–Ω–∏–∫–∞', '/play', '/start', '/help', '/stopgame'])
def handle_other_messages(message):
    chat_id = message.chat.id
    if chat_id not in player_to_game and waiting_player != chat_id:
         bot.send_message(chat_id, '–Ø –±–æ—Ç –¥–ª—è –≥—Ä–∏ "–•—Ä–µ—Å—Ç–∏–∫–∏-–ù—É–ª–∏–∫–∏". –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É "–ó–Ω–∞–π—Ç–∏ —Å—É–ø–µ—Ä–Ω–∏–∫–∞", —â–æ–± –∑—ñ–≥—Ä–∞—Ç–∏!', reply_markup=create_main_reply_keyboard())

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
print('–ë–æ—Ç "–•—Ä–µ—Å—Ç–∏–∫–∏-–ù—É–ª–∏–∫–∏" –∑–∞–ø—É—â–µ–Ω–æ...')
bot.polling(none_stop=True, interval=0, timeout=20)