import os
import logging
import telebot as tb
from telebot import types

# –Ü–º–ø–æ—Ä—Ç–∏ –∫–ª–∞—Å—ñ–≤ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–π –∑ –Ω–∞—à–∏—Ö —Ñ–∞–π–ª—ñ–≤
from constants import (
    DATABASE_FILE, EMPLOYEE_LEVELS, MONTHS,
    STATE_IDLE, STATE_ADD_SURNAME, STATE_ADD_FIRST_NAME,
    STATE_ADD_PATRONYMIC, STATE_ADD_MONTH, STATE_ADD_LEVEL,
    STATE_ADD_HOURS, STATE_ADD_TASKS, STATE_ADD_USD, STATE_ADD_EUR,
    STATE_EDIT_ID, STATE_EDIT_FIELD, STATE_EDIT_VALUE,
    STATE_DELETE_ID_CONFIRM, STATE_REPORT_MONTH_INPUT, STATE_REPORT_YEAR_INPUT
) # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Å—Ç–∞–Ω—ñ–≤ —Ç–∞ —ñ–Ω—à—ñ –∑ constants.py
from salary_manager import SalaryManager # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–≥—ñ–∫–∏ –∑–∞—Ä–ø–ª–∞—Ç (–∑ salary_manager.py)
from utils import format_salary, validate_month_format, LOCALE_SETUP_MESSAGE # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —É—Ç–∏–ª—ñ—Ç–∏ (–∑ utils.py)
# –ü—Ä–∏–±—Ä–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç—ñ–≤ random —Ç–∞ string, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ —Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–∏—Ö ---

TOKEN = '7917068514:AAF7-QdQQNg55_raHMDZN0_yI8ZNxkEfd-M'
# ADMIN_ID = 523793990 # ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è —ñ–Ω—à–∏—Ö —Ü—ñ–ª–µ–π. –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –∫–æ–¥—ñ Salary.
#name: Salary
#name_bot: Salary_AI_bot


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

bot = tb.TeleBot(TOKEN)

manager = SalaryManager(DATABASE_FILE)
logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {manager._load_data()}")
logger.info(LOCALE_SETUP_MESSAGE)


# --- –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞–Ω–∞–º–∏ —Ä–æ–∑–º–æ–≤–∏ ---
user_states = {}
user_data = {}

def get_user_state(chat_id):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –¥—ñ–∞–ª–æ–≥—É –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ —á–∞—Ç—É."""
    return user_states.get(chat_id, STATE_IDLE)

def set_user_state(chat_id, state):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –¥—ñ–∞–ª–æ–≥—É –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ —á–∞—Ç—É."""
    user_states[chat_id] = state

def reset_user_state(chat_id):
    """–°–∫–∏–¥–∞—î —Å—Ç–∞–Ω –¥—ñ–∞–ª–æ–≥—É —Ç–∞ –æ—á–∏—â–∞—î —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user_states.pop(chat_id, None)
    user_data.pop(chat_id, None)
    try:
        bot.clear_step_handler(chat_id)
    except Exception:
        pass


# --- –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ReplyKeyboardMarkup ---
def get_main_menu_markup():
    """–°—Ç–≤–æ—Ä—é—î ReplyKeyboardMarkup –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é (—Ç—ñ–ª—å–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª Salary)."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_add = types.KeyboardButton('‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å')
    btn_list = types.KeyboardButton('üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å—ñ–≤')
    btn_reports = types.KeyboardButton('üìä –ó–≤—ñ—Ç–∏')
    btn_settings = types.KeyboardButton('‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')

    markup.add(btn_add, btn_list)
    markup.add(btn_reports, btn_settings)

    return markup


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥–∏ /start —Ç–∞ /help. –ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."""
    chat_id = message.chat.id
    reset_user_state(chat_id)

    user_name = message.from_user.first_name if message.from_user else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'

    welcome_text = (
        f"–ü—Ä–∏–≤—ñ—Ç, {user_name}! –Ø –±–æ—Ç –¥–ª—è –æ–±–ª—ñ–∫—É –∑–∞—Ä–ø–ª–∞—Ç.\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂—á–µ –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/list, /month, /year_total, /year_avg, /settings, /settings_edit, /details, /add, /edit, /delete\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥—ñ—é –≤ –±—É–¥—å-—è–∫–∏–π –º–æ–º–µ–Ω—Ç."
    )
    bot.send_message(chat_id, welcome_text, reply_markup=get_main_menu_markup())

@bot.message_handler(commands=['cancel'])
def cancel_action(message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /cancel."""
    chat_id = message.chat.id
    current_state = get_user_state(chat_id)
    reset_user_state(chat_id)
    if current_state != STATE_IDLE:
        bot.send_message(chat_id, "–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu_markup())
    else:
        bot.send_message(chat_id, "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –¥—ñ—ó –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.", reply_markup=get_main_menu_markup())


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Salary Bot ---

@bot.message_handler(commands=['list'])
def list_records_command(message):
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ –∑–∞—Ä–ø–ª–∞—Ç—É (—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞ –º—ñ—Å—è—Ü–µ–º)."""
    chat_id = message.chat.id
    reset_user_state(chat_id)

    records = manager.get_all_salary_records(sort_by='month')

    if not records:
        bot.send_message(chat_id, "–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
        return

    report_parts = ["--- –£—Å—ñ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ –∑–∞—Ä–ø–ª–∞—Ç—É (–∑–∞ –º—ñ—Å—è—Ü–µ–º) ---"]
    for record in records:
        report_parts.append(manager.get_record_details_string(record))
    report_parts.append("--- –ö—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É ---")

    full_report = "\n".join(report_parts)
    for i in range(0, len(full_report), 4000):
         bot.send_message(chat_id, full_report[i:i+4000])


@bot.message_handler(commands=['month'])
def report_by_month_command(message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /month <–ú—ñ—Å—è—Ü—å –†—ñ–∫>."""
    chat_id = message.chat.id
    reset_user_state(chat_id)

    args = message.text.split()[1:]
    if not args:
        set_user_state(chat_id, STATE_REPORT_MONTH_INPUT)
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –º—ñ—Å—è—Ü—å –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '/month –°—ñ—á–µ–Ω—å 2024') –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –æ–∫—Ä–µ–º–æ:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, process_report_month_input)
        return

    month_year_input = " ".join(args)
    result = manager.get_salary_report_by_month(month_year_input)

    if isinstance(result, str):
        bot.send_message(chat_id, result)
    else:
        report_parts = [f"--- –ó–∞–ø–∏—Å–∏ –∑–∞ {result[0].month_year} ---"] if result else [f"–î–∞–Ω—ñ –∑–∞ {month_year_input} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."]
        for record in result:
             report_parts.append(manager.get_record_details_string(record))
        if result:
            report_parts.append("--- –ö—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É –∑–∞ –º—ñ—Å—è—Ü—å ---")
        full_report = "\n".join(report_parts)
        for i in range(0, len(full_report), 4000):
            bot.send_message(chat_id, full_report[i:i+4000])


@bot.message_handler(commands=['year_total'])
def report_year_total_command(message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /year_total <–†—ñ–∫>."""
    chat_id = message.chat.id
    reset_user_state(chat_id)

    args = message.text.split()[1:]
    if not args:
        set_user_state(chat_id, STATE_REPORT_YEAR_INPUT)
        user_data[chat_id] = {'report_type': 'year_total'}
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ä—ñ–∫ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '/year_total 2024') –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –æ–∫—Ä–µ–º–æ:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, process_report_year_input)
        return

    year_input = args[0]
    result = manager.get_total_salary_report_by_year(year_input)

    if isinstance(result, str):
         bot.send_message(chat_id, result)
    else:
         report_text = (
             f"--- –ó–∞–≥–∞–ª—å–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ {result['year']} —Ä—ñ–∫ ---\n"
             f"–í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ —Ä—ñ–∫: {result['record_count']}\n"
             f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {result['formatted_total']}\n"
             "------------------------------"
         )
         bot.send_message(chat_id, report_text)


@bot.message_handler(commands=['year_avg'])
def report_year_avg_command(message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /year_avg <–†—ñ–∫>."""
    chat_id = message.chat.id
    reset_user_state(chat_id)

    args = message.text.split()[1:]
    if not args:
        set_user_state(chat_id, STATE_REPORT_YEAR_INPUT)
        user_data[chat_id] = {'report_type': 'year_avg'}
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ä—ñ–∫ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '/year_avg 2024') –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –æ–∫—Ä–µ–º–æ:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, process_report_year_input)
        return

    year_input = args[0]
    result = manager.get_average_salary_report_by_year(year_input)

    if isinstance(result, str):
         bot.send_message(chat_id, result)
    else:
         report_text = (
             f"--- –°–µ—Ä–µ–¥–Ω—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º—ñ—Å—è—Ü—å —É {result['year']} —Ä–æ—Ü—ñ ---\n"
             f"–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ {result['record_count']} –∑–∞–ø–∏—Å—ñ–≤.\n"
             f"–°–µ—Ä–µ–¥–Ω—è —Å—É–º–∞: {result['formatted_average']}\n"
             "------------------------------"
         )
         bot.send_message(chat_id, report_text)


@bot.message_handler(commands=['settings'])
def show_settings_command(message):
    """–ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–∞—Ä–ø–ª–∞—Ç–∏."""
    chat_id = message.chat.id
    reset_user_state(chat_id)
    settings_string = manager.get_settings_string()
    bot.send_message(chat_id, settings_string)

@bot.message_handler(commands=['settings_edit'])
def settings_edit_command(message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
    chat_id = message.chat.id
    reset_user_state(chat_id)

    args = message.text.split()[1:]
    if not args:
        help_text = (
            "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –∫–æ–º–∞–Ω–¥:\n"
            "`/settings_edit base_amount –†—ñ–≤–µ–Ω—å –ó–Ω–∞—á–µ–Ω–Ω—è` (–Ω–∞–ø—Ä. `/settings_edit base_amount Junior 15000`)\n"
            "`/settings_edit coefficient –†—ñ–≤–µ–Ω—å –ó–Ω–∞—á–µ–Ω–Ω—è` (–Ω–∞–ø—Ä. `/settings_edit coefficient Middle 1.6`)\n"
            "`/settings_edit task_cost –ù–∞–∑–≤–∞ –í–∞—Ä—Ç—ñ—Å—Ç—å` (–Ω–∞–ø—Ä. `/settings_edit task_cost Complex 700`)\n"
            "`/settings_edit task_delete –ù–∞–∑–≤–∞` (–Ω–∞–ø—Ä. `/settings_edit task_delete Simple`)\n"
            "`/settings_edit hours –ó–Ω–∞—á–µ–Ω–Ω—è` (–Ω–∞–ø—Ä. `/settings_edit hours 160`)\n"
            "`/settings_edit rates USD_–ó–Ω–∞—á–µ–Ω–Ω—è EUR_–ó–Ω–∞—á–µ–Ω–Ω—è` (–Ω–∞–ø—Ä. `/settings_edit rates 42.5 45.0`)\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /settings —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è."
        )
        formatted_help_text = "<b>–Ø–∫ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</b>\n" + help_text.replace('`', '<code>').replace('\n', '<br>')
        bot.send_message(chat_id, formatted_help_text, parse_mode="HTML")
        return

    setting_type = args[0].lower()
    result = "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `/settings_edit` –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏."

    if setting_type == 'base_amount' and len(args) == 3:
        level = args[1]
        value = args[2]
        result = manager.edit_base_amount_setting(level, value)
    elif setting_type == 'coefficient' and len(args) == 3:
        level = args[1]
        value = args[2]
        result = manager.edit_coefficient_setting(level, value)
    elif setting_type == 'task_cost' and len(args) >= 3:
         task_name_parts = args[1:-1]
         task_name = " ".join(task_name_parts)
         cost = args[-1]
         result = manager.edit_task_cost_setting(task_name, cost)
    elif setting_type == 'task_delete' and len(args) >= 2:
         task_name_parts = args[1:]
         task_name = " ".join(task_name_parts)
         result = manager.delete_task_cost_setting(task_name)
    elif setting_type == 'hours' and len(args) == 2:
        value = args[1]
        result = manager.edit_standard_hours_setting(value)
    elif setting_type == 'rates' and len(args) == 3:
        usd_value = args[1]
        eur_value = args[2]
        result = manager.edit_default_rates_setting(usd_value, eur_value)

    bot.send_message(chat_id, result)

@bot.message_handler(commands=['details'])
def show_record_details_command(message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /details <ID>."""
    chat_id = message.chat.id
    reset_user_state(chat_id)

    args = message.text.split()[1:]
    if not args:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å ID –∑–∞–ø–∏—Å—É –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '/details 123').")
        return

    record_id_input = args[0]
    record = manager.find_record_by_id(record_id_input)

    if not record:
        bot.send_message(chat_id, f"–ó–∞–ø–∏—Å —ñ–∑ ID '{record_id_input}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    details_text = manager.get_record_details_string(record)

    action_markup = types.InlineKeyboardMarkup(row_width=2)
    btn_edit = types.InlineKeyboardButton('‚úçÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏', callback_data=f'edit_rec_{record.id}')
    btn_delete = types.InlineKeyboardButton('üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏', callback_data=f'delete_rec_{record.id}')
    action_markup.add(btn_edit, btn_delete)

    bot.send_message(chat_id, details_text, reply_markup=action_markup)


# --- –û–±—Ä–æ–±–Ω–∏–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ReplyKeyboardMarkup —Ç–∞ —ñ–Ω—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
@bot.message_handler(content_types=['text'])
def handle_text_messages(message):
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—ñ –Ω–µ —î –∫–æ–º–∞–Ω–¥–∞–º–∏."""
    chat_id = message.chat.id
    message_text = message.text.strip()
    current_state = get_user_state(chat_id)

    if current_state != STATE_IDLE:
         bot.send_message(chat_id, "‚ùå –ü–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∞–±–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel.", reply_markup=get_main_menu_markup())
         reset_user_state(chat_id)
         return

    match message_text:
        case '‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å':
            add_start(message)
        case 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å—ñ–≤':
            list_records_command(message)
        case 'üìä –ó–≤—ñ—Ç–∏':
            report_markup = types.InlineKeyboardMarkup()
            btn_month_report = types.InlineKeyboardButton('–ó–≤—ñ—Ç –∑–∞ –º—ñ—Å—è—Ü—å', callback_data='report_type_month')
            btn_year_total = types.InlineKeyboardButton('–ó–∞–≥–∞–ª—å–Ω–∏–π –∑–∞ —Ä—ñ–∫', callback_data='report_type_year_total')
            btn_year_avg = types.InlineKeyboardButton('–°–µ—Ä–µ–¥–Ω—ñ–π –∑–∞ —Ä—ñ–∫', callback_data='report_type_year_avg')
            report_markup.add(btn_month_report, btn_year_total, btn_year_avg, row_width=1)
            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤—ñ—Ç—É:", reply_markup=report_markup)
        case '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è':
            settings_markup = types.InlineKeyboardMarkup()
            btn_show_settings = types.InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ', callback_data='settings_show')
            btn_edit_settings_help = types.InlineKeyboardButton('–Ø–∫ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏', callback_data='settings_edit_help')
            settings_markup.add(btn_show_settings, btn_edit_settings_help, row_width=1)
            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏:", reply_markup=settings_markup)

        case _:
            bot.send_message(chat_id, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–±–æ —Ç–µ–∫—Å—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∞–±–æ –∫–æ–º–∞–Ω–¥–∏.", reply_markup=get_main_menu_markup())


# --- –û–±—Ä–æ–±–Ω–∏–∫ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä ---
@bot.callback_query_handler(func=lambda call: call.data.startswith(('report_type_', 'settings_', 'edit_rec_', 'delete_rec_')))
def handle_inline_buttons(call):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è Inline –∫–Ω–æ–ø–æ–∫."""
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    callback_data = call.data

    bot.answer_callback_query(call.id, text='–û–ö')

    if callback_data.startswith('report_type_'):
        report_type = callback_data.split('_')[2]

        try:
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤—ñ—Ç—É:', reply_markup=None)
        except Exception as e:
             logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –≤ —á–∞—Ç—ñ {chat_id}: {e}")
             pass

        if report_type == 'month':
            set_user_state(chat_id, STATE_REPORT_MONTH_INPUT)
            bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—è—Ü—å –¥–ª—è –∑–≤—ñ—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–°—ñ—á–µ–Ω—å 2024'):", reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(call.message, process_report_month_input)
        elif report_type in ['year_total', 'year_avg']:
             user_data[chat_id] = {'report_type': report_type}
             set_user_state(chat_id, STATE_REPORT_YEAR_INPUT)
             bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ –¥–ª—è –∑–≤—ñ—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '2024'):", reply_markup=types.ReplyKeyboardRemove())
             bot.register_next_step_handler(call.message, process_report_year_input)

    elif callback_data.startswith('settings_'):
        action = callback_data.split('_')[1]
        try:
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏:', reply_markup=None)
        except Exception as e:
             logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –≤ —á–∞—Ç—ñ {chat_id}: {e}")
             pass

        if action == 'show':
            bot.send_message(chat_id, manager.get_settings_string(), reply_markup=get_main_menu_markup())
        elif action == 'edit_help':
             help_text = (
                "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –∫–æ–º–∞–Ω–¥:\n"
                "`/settings_edit base_amount –†—ñ–≤–µ–Ω—å –ó–Ω–∞—á–µ–Ω–Ω—è` (–Ω–∞–ø—Ä. `/settings_edit base_amount Junior 15000`)\n"
                "`/settings_edit coefficient –†—ñ–≤–µ–Ω—å –ó–Ω–∞—á–µ–Ω–Ω—è` (–Ω–∞–ø—Ä. `/settings_edit coefficient Middle 1.6`)\n"
                "`/settings_edit task_cost –ù–∞–∑–≤–∞ –í–∞—Ä—Ç—ñ—Å—Ç—å` (–Ω–∞–ø—Ä. `/settings_edit task_cost Complex 700`)\n"
                "`/settings_edit task_delete –ù–∞–∑–≤–∞` (–Ω–∞–ø—Ä. `/settings_edit task_delete Simple`)\n"
                "`/settings_edit hours –ó–Ω–∞—á–µ–Ω–Ω—è` (–Ω–∞–ø—Ä. `/settings_edit hours 160`)\n"
                "`/settings_edit rates USD_–ó–Ω–∞—á–µ–Ω–Ω—è EUR_–ó–Ω–∞—á–µ–Ω–Ω—è` (–Ω–∞–ø—Ä. `/settings_edit rates 42.5 45.0`)\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /settings —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è."
            )
             formatted_help_text = "<b>–Ø–∫ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</b>\n" + help_text.replace('`', '<code>').replace('\n', '<br>')
             bot.send_message(chat_id, formatted_help_text, parse_mode="HTML", reply_markup=get_main_menu_markup())


    elif callback_data.startswith(('edit_rec_', 'delete_rec_')):
         parts = callback_data.split('_')
         action = parts[0]
         try:
             record_id = int(parts[2])

             try:
                  original_text = call.message.text
                  action_text = "‚û°Ô∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É..." if action == 'edit' else "‚û°Ô∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É..."
                  bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=original_text + f"\n\n{action_text}", reply_markup=None)
             except Exception as e:
                  logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π {message_id} –≤ —á–∞—Ç—ñ {chat_id}: {e}")
                  pass

             if action == 'delete' :
                  result = manager.delete_salary_record(record_id)
                  if isinstance(result, manager.MonthlySalaryRecord):
                       bot.send_message(chat_id, f"‚úÖ –ó–∞–ø–∏—Å #{record_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!", reply_markup=get_main_menu_markup())
                  else:
                       bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É #{record_id}: {result}", reply_markup=get_main_menu_markup())
             elif action == 'edit':
                  bot.send_message(chat_id, f"–û–ö. –ü–æ—á–∏–Ω–∞—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É #{record_id}.", reply_markup=types.ReplyKeyboardRemove())
                  edit_start(call.message, record_id=record_id)

         except (ValueError, IndexError) as e:
             logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É callback_data '{callback_data}': {e}")
             bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è.", reply_markup=get_main_menu_markup())


# --- –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –∑–≤—ñ—Ç—ñ–≤ (–∫—Ä–æ–∫–∏ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∑–≤—ñ—Ç—É) ---
def process_report_month_input(message):
    """–ö—Ä–æ–∫ 1 –∑–≤—ñ—Ç—É –∑–∞ –º—ñ—Å—è—Ü—å: –≤–≤–µ–¥–µ–Ω–Ω—è –ú—ñ—Å—è—Ü—å –†—ñ–∫."""
    chat_id = message.chat.id
    if message.text and message.text.strip() == '/cancel': cancel_action(message); return
    if get_user_state(chat_id) != STATE_REPORT_MONTH_INPUT:
         bot.send_message(chat_id, "–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu_markup())
         reset_user_state(chat_id)
         return

    month_year_input = message.text.strip()

    if not message.text:
         bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—è—Ü—å —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–°—ñ—á–µ–Ω—å 2024') –∞–±–æ /cancel:", reply_markup=types.ReplyKeyboardRemove())
         bot.register_next_step_handler(message, process_report_month_input)
         return


    result = manager.get_salary_report_by_month(month_year_input)

    if isinstance(result, str):
        bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–±–æ –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {result}\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ /cancel.")
        bot.register_next_step_handler(message, process_report_month_input)
        return
    else:
        report_parts = [f"--- –ó–∞–ø–∏—Å–∏ –∑–∞ {result[0].month_year} ---"] if result else [f"–î–∞–Ω—ñ –∑–∞ {month_year_input} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."]
        for record in result:
             report_parts.append(manager.get_record_details_string(record))
        if result:
            report_parts.append("--- –ö—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É –∑–∞ –º—ñ—Å—è—Ü—å ---")
        full_report = "\n".join(report_parts)
        for i in range(0, len(full_report), 4000):
            bot.send_message(chat_id, full_report[i:i+4000])

        reset_user_state(chat_id)
        bot.send_message(chat_id, "–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=get_main_menu_markup())


def process_report_year_input(message):
    """–ö—Ä–æ–∫ 1 –∑–≤—ñ—Ç—É –∑–∞ —Ä—ñ–∫: –≤–≤–µ–¥–µ–Ω–Ω—è –†—ñ–∫."""
    chat_id = message.chat.id
    if message.text and message.text.strip() == '/cancel': cancel_action(message); return
    if get_user_state(chat_id) != STATE_REPORT_YEAR_INPUT:
         bot.send_message(chat_id, "–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu_markup())
         reset_user_state(chat_id)
         return

    year_input = message.text.strip()

    try:
        int(year_input)
    except ValueError:
        bot.send_message(chat_id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '2024') –∞–±–æ /cancel:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, process_report_year_input)
        return


    report_type = user_data[chat_id].get('report_type')

    if report_type == 'year_total':
        result = manager.get_total_salary_report_by_year(year_input)
    elif report_type == 'year_avg':
        result = manager.get_average_salary_report_by_year(year_input)
    else:
        result = "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–≤—ñ—Ç—É."

    if isinstance(result, str):
         bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–±–æ –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {result}\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ /cancel.")
         bot.register_next_step_handler(message, process_report_year_input)
    else:
         if report_type == 'year_total':
              report_text = (
                 f"--- –ó–∞–≥–∞–ª—å–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ {result['year']} —Ä—ñ–∫ ---\n"
                 f"–í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ —Ä—ñ–∫: {result['record_count']}\n"
                 f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {result['formatted_total']}\n"
                 "------------------------------"
              )
         elif report_type == 'year_avg':
              report_text = (
                 f"--- –°–µ—Ä–µ–¥–Ω—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º—ñ—Å—è—Ü—å —É {result['year']} —Ä–æ—Ü—ñ ---\n"
                 f"–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ {result['record_count']} –∑–∞–ø–∏—Å—ñ–≤.\n"
                 f"–°–µ—Ä–µ–¥–Ω—è —Å—É–º–∞: {result['formatted_average']}\n"
                 "------------------------------"
              )
         else:
              report_text = result
         bot.send_message(chat_id, report_text)

         reset_user_state(chat_id)
         bot.send_message(chat_id, "–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=get_main_menu_markup())


# --- –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–≥–∞—Ç–æ–µ—Ç–∞–ø–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤ Salary Bot (/add, /edit, /delete) ---

def add_start(message):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É, –∑–∞–ø–∏—Ç—É—é—á–∏ –ø—Ä—ñ–∑–≤–∏—â–µ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞."""
    chat_id = message.chat.id
    reset_user_state(chat_id)
    set_user_state(chat_id, STATE_ADD_SURNAME)
    user_data[chat_id] = {}
    bot.send_message(chat_id, "–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É –ø—Ä–æ –∑–∞—Ä–ø–ª–∞—Ç—É.\n–í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, add_surname_step)

# --- –§—É–Ω–∫—Ü—ñ—ó –∫—Ä–æ–∫—ñ–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É (/add) ---
def add_surname_step(message):
    """–ö—Ä–æ–∫ 1 –¥–æ–¥–∞–≤–∞–Ω–Ω—è: –ü—Ä—ñ–∑–≤–∏—â–µ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞."""
    chat_id = message.chat.id
    if message.text and message.text.strip() == '/cancel': cancel_action(message); return
    if get_user_state(chat_id) != STATE_ADD_SURNAME: return

    if not message.text:
         bot.send_message(chat_id, "–ü—Ä—ñ–∑–≤–∏—â–µ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞:", reply_markup=types.ReplyKeyboardRemove())
         bot.register_next_step_handler(message, add_surname_step); return

    surname = message.text.strip().title()
    user_data[chat_id]['surname'] = surname
    set_user_state(chat_id, STATE_ADD_FIRST_NAME)
    bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞:")
    bot.register_next_step_handler(message, add_first_name_step)

def add_first_name_step(message):
    """–ö—Ä–æ–∫ 2 –¥–æ–¥–∞–≤–∞–Ω–Ω—è: –Ü–º'—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞."""
    chat_id = message.chat.id
    if message.text and message.text.strip() == '/cancel': cancel_action(message); return
    if get_user_state(chat_id) != STATE_ADD_FIRST_NAME: return

    if not message.text:
         bot.send_message(chat_id, "–Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞:", reply_markup=types.ReplyKeyboardRemove())
         bot.register_next_step_handler(message, add_first_name_step); return

    first_name = message.text.strip().title()
    user_data[chat_id]['first_name'] = first_name
    set_user_state(chat_id, STATE_ADD_PATRONYMIC)
    bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ (–∞–±–æ Enter, —è–∫—â–æ –Ω–µ–º–∞—î):")
    bot.register_next_step_handler(message, add_patronymic_step)

def add_patronymic_step(message):
    """–ö—Ä–æ–∫ 3 –¥–æ–¥–∞–≤–∞–Ω–Ω—è: –ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞."""
    chat_id = message.chat.id
    if message.text and message.text.strip() == '/cancel': cancel_action(message); return
    if get_user_state(chat_id) != STATE_ADD_PATRONYMIC: return

    patronymic = message.text.strip().title() if message.text else ""
    user_data[chat_id]['patronymic'] = patronymic

    surname = user_data[chat_id].get('surname', '')
    first_name = user_data[chat_id].get('first_name', '')
    full_name_parts = [part for part in [surname, first_name, patronymic] if part]
    full_employee_name = " ".join(full_name_parts)

    if not full_employee_name:
         bot.send_message(chat_id, "–Ü–º'—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø—Ä—ñ–∑–≤–∏—â–µ –∞–±–æ —ñ–º'—è.", reply_markup=types.ReplyKeyboardRemove())
         add_start(message)
         return


    user_data[chat_id]['employee_name'] = full_employee_name

    set_user_state(chat_id, STATE_ADD_MONTH)
    bot.send_message(chat_id, f"OK, –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫: {full_employee_name}\n–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—è—Ü—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–°—ñ—á–µ–Ω—å 2024'):")
    bot.register_next_step_handler(message, add_month_step)

def add_month_step(message):
    """–ö—Ä–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è: –ú—ñ—Å—è—Ü—å."""
    chat_id = message.chat.id
    if message.text and message.text.strip() == '/cancel': cancel_action(message); return
    if get_user_state(chat_id) != STATE_ADD_MONTH: return

    if not message.text:
         bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—è—Ü—å —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–°—ñ—á–µ–Ω—å 2024'):")
         bot.register_next_step_handler(message, add_month_step); return

    month_year = message.text.strip()
    is_valid, result = validate_month_format(month_year)
    if not is_valid:
        bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {result}\n–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—è—Ü—å —â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–°—ñ—á–µ–Ω—å 2024'):")
        bot.register_next_step_handler(message, add_month_step)
        return

    user_data[chat_id]['month_year'] = result

    employee_name = user_data[chat_id].get('employee_name')
    if employee_name is None:
         bot.send_message(chat_id, "‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞: –í—ñ–¥—Å—É—Ç–Ω—î —ñ–º'—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑ /add —â–µ —Ä–∞–∑.")
         reset_user_state(chat_id)
         return

    if any(r.employee_name.lower() == employee_name.lower() and r.month_year.lower() == result.lower() for r in manager.monthly_records):
         bot.send_message(chat_id, f"–ü–æ–º–∏–ª–∫–∞: –î–∞–Ω—ñ –∑–∞ {result} –¥–ª—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ {employee_name} —É–∂–µ —ñ—Å–Ω—É—é—Ç—å! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /edit –¥–ª—è –∑–º—ñ–Ω–∏.\n–î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
         reset_user_state(chat_id)
         return

    set_user_state(chat_id, STATE_ADD_LEVEL)
    level_keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for level in EMPLOYEE_LEVELS:
        level_keyboard.add(types.KeyboardButton(level))
    bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞. –î–æ–ø—É—Å—Ç–∏–º—ñ: {', '.join(EMPLOYEE_LEVELS)}:", reply_markup=level_keyboard)
    bot.register_next_step_handler(message, add_level_step)

def add_level_step(message):
    """–ö—Ä–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è: –†—ñ–≤–µ–Ω—å."""
    chat_id = message.chat.id
    if message.text and message.text.strip() == '/cancel': cancel_action(message); return
    if get_user_state(chat_id) != STATE_ADD_LEVEL: return

    if not message.text:
         bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å —Ç–µ–∫—Å—Ç–æ–º –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –∫–Ω–æ–ø–∫—É:", reply_markup=types.ReplyKeyboardRemove())
         bot.register_next_step_handler(message, add_level_step); return

    level = message.text.strip().capitalize()
    if level not in EMPLOYEE_LEVELS:
        level_keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for level_opt in EMPLOYEE_LEVELS:
             level_keyboard.add(types.KeyboardButton(level_opt))
        bot.send_message(chat_id, f"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ä—ñ–≤–µ–Ω—å '{message.text}'. –í–∏–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É: {', '.join(EMPLOYEE_LEVELS)}:", reply_markup=level_keyboard)
        bot.register_next_step_handler(message, add_level_step)
        return

    user_data[chat_id]['level'] = level
    set_user_state(chat_id, STATE_ADD_HOURS)
    bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å —Ñ–∞–∫—Ç–∏—á–Ω–æ –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏ (—á–∏—Å–ª–æ):", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, add_hours_step)

def add_hours_step(message):
    """–ö—Ä–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è: –ì–æ–¥–∏–Ω–∏."""
    chat_id = message.chat.id
    if message.text and message.text.strip() == '/cancel': cancel_action(message); return
    if get_user_state(chat_id) != STATE_ADD_HOURS: return

    if not message.text:
         bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏ —á–∏—Å–ª–æ–º:", reply_markup=types.ReplyKeyboardRemove())
         bot.register_next_step_handler(message, add_hours_step); return

    try:
        hours = float(message.text.strip())
        if hours < 0:
            bot.send_message(chat_id, "‚ùå –í—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏ –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–∏–º–∏. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≥–æ–¥–∏–Ω:")
            bot.register_next_step_handler(message, add_hours_step)
            return
        user_data[chat_id]['actual_hours'] = hours
        set_user_state(chat_id, STATE_ADD_TASKS)
        bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –∑–∞ –º—ñ—Å—è—Ü—å (—á–∏—Å–ª–æ). –ù–∞–ø—Ä–∏–∫–ª–∞–¥, {manager.settings.task_costs.get('Simple', 1000.0):.2f} –∑–∞ Simple –∑–∞–¥–∞—á—É:")
        bot.register_next_step_handler(message, add_tasks_step)
    except (ValueError, TypeError):
        bot.send_message(chat_id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≥–æ–¥–∏–Ω:")
        bot.register_next_step_handler(message, add_hours_step)

def add_tasks_step(message):
    """–ö—Ä–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è: –í–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω—å."""
    chat_id = message.chat.id
    if message.text and message.text.strip() == '/cancel': cancel_action(message); return
    if get_user_state(chat_id) != STATE_ADD_TASKS: return

    if not message.text:
         bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω—å —á–∏—Å–ª–æ–º:", reply_markup=types.ReplyKeyboardRemove())
         bot.register_next_step_handler(message, add_tasks_step); return

    try:
        tasks_value = float(message.text.strip())
        if tasks_value < 0:
            bot.send_message(chat_id, "‚ùå –í–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ:")
            bot.register_next_step_handler(message, add_tasks_step)
            return
        user_data[chat_id]['tasks_completed_value'] = tasks_value
        set_user_state(chat_id, STATE_ADD_USD)

        last_record = next(iter(reversed(manager.monthly_records)), None)
        default_usd = last_record.usd_rate if last_record else manager.settings.default_rates.get("USD", 40.0)

        bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å –∫—É—Ä—Å –¥–æ–ª–∞—Ä–∞ (USD) –∑–∞ –º—ñ—Å—è—Ü—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, {default_usd:.2f}). –ù–∞–¥—ñ—à–ª—ñ—Ç—å Enter, —â–æ–± –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ü–µ –∑–Ω–∞—á–µ–Ω–Ω—è:")
        bot.register_next_step_handler(message, add_usd_rate_step)

    except (ValueError, TypeError):
        bot.send_message(chat_id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞–≤–¥–∞–Ω—å:")
        bot.register_next_step_handler(message, add_tasks_step)

def add_usd_rate_step(message):
    """–ö—Ä–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è: –ö—É—Ä—Å USD."""
    chat_id = message.chat.id
    if message.text and message.text.strip() == '/cancel': cancel_action(message); return
    if get_user_state(chat_id) != STATE_ADD_USD: return

    usd_input = message.text.strip()
    last_record = next(iter(reversed(manager.monthly_records)), None)
    default_usd = last_record.usd_rate if last_record else manager.settings.default_rates.get("USD", 40.0)
    usd_rate = default_usd

    if usd_input:
        try:
            usd_rate = float(usd_input)
            if usd_rate <= 0:
                bot.send_message(chat_id, "‚ùå –ö—É—Ä—Å –¥–æ–ª–∞—Ä–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—ñ–º:")
                bot.register_next_step_handler(message, add_usd_rate_step)
                return
            if usd_rate < 10 or usd_rate > 200:
                 bot.send_message(chat_id, f"‚ö†Ô∏è –£–≤–∞–≥–∞: –í–≤–µ–¥–µ–Ω–∏–π –∫—É—Ä—Å –¥–æ–ª–∞—Ä–∞ ({usd_rate:.2f}) –≤–∏–≥–ª—è–¥–∞—î –Ω–µ–∑–≤–∏—á–Ω–æ.")
        except (ValueError, TypeError):
            bot.send_message(chat_id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫—É—Ä—Å—É –¥–æ–ª–∞—Ä–∞ –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—ñ–º:")
            bot.register_next_step_handler(message, add_usd_rate_step)
            return

    user_data[chat_id]['usd_rate'] = usd_rate
    set_user_state(chat_id, STATE_ADD_EUR)
    default_eur = last_record.eur_rate if last_record else manager.settings.default_rates.get("EUR", 43.0)

    bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å –∫—É—Ä—Å —î–≤—Ä–æ (EUR) –∑–∞ –º—ñ—Å—è—Ü—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, {default_eur:.2f}). –ù–∞–¥—ñ—à–ª—ñ—Ç—å Enter, —â–æ–± –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ü–µ –∑–Ω–∞—á–µ–Ω–Ω—è:")
    bot.register_next_step_handler(message, add_eur_rate_step)


def add_eur_rate_step(message):
    """–ö—Ä–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è: –ö—É—Ä—Å EUR —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è."""
    chat_id = message.chat.id
    if message.text and message.text.strip() == '/cancel': cancel_action(message); return
    if get_user_state(chat_id) != STATE_ADD_EUR: return

    eur_input = message.text.strip()
    last_record = next(iter(reversed(manager.monthly_records)), None)
    default_eur = last_record.eur_rate if last_record else manager.settings.default_rates.get("EUR", 43.0)
    eur_rate = default_eur

    if eur_input:
        try:
            eur_rate = float(eur_input)
            if eur_rate <= 0:
                bot.send_message(chat_id, "‚ùå –ö—É—Ä—Å —î–≤—Ä–æ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—ñ–º:")
                bot.register_next_step_handler(message, add_eur_rate_step)
                return
            if eur_rate < 10 or eur_rate > 200:
                bot.send_message(chat_id, f"‚ö†Ô∏è –£–≤–∞–≥–∞: –í–≤–µ–¥–µ–Ω–∏–π –∫—É—Ä—Å —î–≤—Ä–æ ({eur_rate:.2f}) –≤–∏–≥–ª—è–¥–∞—î –Ω–µ–∑–≤–∏—á–Ω–æ.")
        except (ValueError, TypeError):
            bot.send_message(chat_id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫—É—Ä—Å—É —î–≤—Ä–æ –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—ñ–º:")
            bot.register_next_step_handler(message, add_eur_rate_step)
            return

    user_data[chat_id]['eur_rate'] = eur_rate

    name = user_data[chat_id].get('employee_name')
    month = user_data[chat_id].get('month_year')
    level = user_data[chat_id].get('level')
    hours = user_data[chat_id].get('actual_hours')
    tasks = user_data[chat_id].get('tasks_completed_value')
    usd = user_data[chat_id].get('usd_rate')
    eur = user_data[chat_id].get('eur_rate')

    if None in [name, month, level, hours, tasks, usd, eur]:
         logger.error(f"–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞: –ù–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –≤ —á–∞—Ç—ñ {chat_id}. –î–∞–Ω—ñ: {user_data.get(chat_id)}")
         bot.send_message(chat_id, "‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞: –ù–µ –≤—Å—ñ –¥–∞–Ω—ñ –±—É–ª–∏ –∑—ñ–±—Ä–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ /add.", reply_markup=get_main_menu_markup())
    else:
        result = manager.add_salary_record(name, month, level, hours, tasks, usd, eur)

        if isinstance(result, manager.MonthlySalaryRecord):
            bot.send_message(chat_id,
                f"‚úÖ –ó–∞–ø–∏—Å #{result.id} –∑–∞ {result.month_year} –¥–ª—è {result.employee_name} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!\n"
                f"–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞: {format_salary(result.calculated_salary_uah, result.usd_rate, result.eur_rate)}",
                reply_markup=get_main_menu_markup()
            )
        else:
            bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—É: {result}", reply_markup=get_main_menu_markup())

    reset_user_state(chat_id)


# --- –§—É–Ω–∫—Ü—ñ—ó –∫—Ä–æ–∫—ñ–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É (/edit) ---
@bot.message_handler(commands=['edit'])
def edit_start(message, record_id=None):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É."""
    chat_id = message.chat.id
    reset_user_state(chat_id)
    set_user_state(chat_id, STATE_EDIT_ID)
    user_data[chat_id] = {}

    if record_id is not None:
         message.text = str(record_id)
         edit_id_step(message)
    else:
        bot.send_message(chat_id, "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É. –í–≤–µ–¥—ñ—Ç—å ID –∑–∞–ø–∏—Å—É, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è):", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, edit_id_step)

def edit_id_step(message):
    """–ö—Ä–æ–∫ 1 —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: –í–≤–µ–¥–µ–Ω–Ω—è ID."""
    chat_id = message.chat.id
    if message.text and message.text.strip() == '/cancel': cancel_action(message); return
    if get_user_state(chat_id) != STATE_EDIT_ID: return

    if not message.text:
         bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å ID –∑–∞–ø–∏—Å—É —á–∏—Å–ª–æ–º:", reply_markup=types.ReplyKeyboardRemove())
         bot.register_next_step_handler(message, edit_id_step); return


    record_id_input = message.text.strip()
    record_to_edit = manager.find_record_by_id(record_id_input)

    if not record_to_edit:
        bot.send_message(chat_id, f"‚ùå –ó–∞–ø–∏—Å —ñ–∑ ID '{record_id_input}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∞–±–æ /cancel:")
        bot.register_next_step_handler(message, edit_id_step)
        return

    user_data[chat_id]['record_id_to_edit'] = record_to_edit.id
    user_data[chat_id]['record_data'] = record_to_edit.to_dict()

    details_string = manager.get_record_details_string(record_to_edit)

    set_user_state(chat_id, STATE_EDIT_FIELD)
    bot.send_message(chat_id, f"–ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å:\n{details_string}\n"
                                    "–Ø–∫–µ –ø–æ–ª–µ —Ö–æ—á–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏? (employee_name, month_year, level, actual_hours, tasks_completed_value, usd_rate, eur_rate)\n"
                                    "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
    bot.register_next_step_handler(message, edit_field_step)


def edit_field_step(message):
    """–ö—Ä–æ–∫ 2 —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: –í–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –ø–æ–ª—è."""
    chat_id = message.chat.id
    if message.text and message.text.strip() == '/cancel': cancel_action(message); return
    if get_user_state(chat_id) != STATE_EDIT_FIELD: return

    if not message.text:
         bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ–ª—è —Ç–µ–∫—Å—Ç–æ–º:", reply_markup=types.ReplyKeyboardRemove())
         bot.register_next_step_handler(message, edit_field_step); return

    field_name = message.text.strip().lower()
    valid_fields = ['employee_name', 'month_year', 'level', 'actual_hours', 'tasks_completed_value', 'usd_rate', 'eur_rate']

    if field_name not in valid_fields:
        bot.send_message(chat_id, f"‚ùå –ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–ª–µ '{field_name}'. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –æ–¥–Ω–µ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö: {', '.join(valid_fields)}\n"
                                        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
        bot.register_next_step_handler(message, edit_field_step)
        return

    user_data[chat_id]['field_to_edit'] = field_name
    current_value = user_data[chat_id]['record_data'].get(field_name, 'N/A')

    set_user_state(chat_id, STATE_EDIT_VALUE)
    reply_markup = types.ReplyKeyboardRemove()
    extra_info = ""
    if field_name == 'month_year':
         extra_info = " (—É —Ñ–æ—Ä–º–∞—Ç—ñ '–ú—ñ—Å—è—Ü—å –†—ñ–∫', –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–°—ñ—á–µ–Ω—å 2024')"
    elif field_name == 'level':
         level_keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
         for level_opt in EMPLOYEE_LEVELS:
              level_keyboard.add(types.KeyboardButton(level_opt))
         reply_markup = level_keyboard
         extra_info = f" (–î–æ–ø—É—Å—Ç–∏–º—ñ: {', '.join(EMPLOYEE_LEVELS)})"
    elif field_name in ['actual_hours', 'tasks_completed_value', 'usd_rate', 'eur_rate']:
         extra_info = " (—á–∏—Å–ª–æ)"

    bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ–ª—è '{field_name}' (–ø–æ—Ç–æ—á–Ω–µ: '{current_value}'){extra_info}:\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /skip –∞–±–æ Enter, —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –±–µ–∑ –∑–º—ñ–Ω.", reply_markup=reply_markup)
    bot.register_next_step_handler(message, edit_value_step)


def edit_value_step(message):
    """–ö—Ä–æ–∫ 3 —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: –í–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è."""
    chat_id = message.chat.id
    if message.text and message.text.strip() == '/cancel': cancel_action(message); return
    if get_user_state(chat_id) != STATE_EDIT_VALUE: return

    field_to_edit = user_data[chat_id].get('field_to_edit')
    record_id = user_data[chat_id].get('record_id_to_edit')

    if not field_to_edit or record_id is None:
         logger.error(f"–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: –í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ –∞–±–æ ID –≤ —á–∞—Ç—ñ {chat_id}. –î–∞–Ω—ñ: {user_data.get(chat_id)}")
         bot.send_message(chat_id, "‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑ /edit —â–µ —Ä–∞–∑.", reply_markup=get_main_menu_markup())
         reset_user_state(chat_id)
         return

    new_value_input = message.text.strip()

    if new_value_input.lower() == '/skip' or not new_value_input:
        updates = {}
        result = "–ó–º—ñ–Ω –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ."
    else:
        updates = {field_to_edit: new_value_input}
        if field_to_edit in ['actual_hours', 'tasks_completed_value', 'usd_rate', 'eur_rate']:
            try:
                float(new_value_input)
            except ValueError:
                bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: –ó–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ–ª—è '{field_to_edit}' –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —â–µ —Ä–∞–∑ –∞–±–æ /cancel.", reply_markup=types.ReplyKeyboardRemove())
                bot.register_next_step_handler(message, edit_value_step)
                return
        if field_to_edit == 'month_year':
            is_valid, result_month_format = validate_month_format(new_value_input)
            if not is_valid:
                 bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {result_month_format}\n–°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –º—ñ—Å—è—Ü—å —â–µ —Ä–∞–∑ –∞–±–æ /cancel.", reply_markup=types.ReplyKeyboardRemove())
                 bot.register_next_step_handler(message, edit_value_step)
                 return
            updates[field_to_edit] = result_month_format
        if field_to_edit == 'level':
             new_value_input_formatted = new_value_input.capitalize()
             if new_value_input_formatted not in EMPLOYEE_LEVELS:
                 level_keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
                 for level_opt in EMPLOYEE_LEVELS:
                      level_keyboard.add(types.KeyboardButton(level_opt))
                 bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ—Ä–Ω–∏–π —Ä—ñ–≤–µ–Ω—å '{new_value_input}'. –î–æ–ø—É—Å—Ç–∏–º—ñ: {', '.join(EMPLOYEE_LEVELS)}\n–°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ä—ñ–≤–µ–Ω—å —â–µ —Ä–∞–∑ –∞–±–æ /cancel.", reply_markup=level_keyboard)
                 bot.register_next_step_handler(message, edit_value_step)
                 return
             updates[field_to_edit] = new_value_input_formatted
        if field_to_edit == 'employee_name':
             updates[field_to_edit] = new_value_input.title()


        result = manager.edit_salary_record(record_id, updates)

    if isinstance(result, manager.MonthlySalaryRecord):
        bot.send_message(chat_id,
            f"‚úÖ –ó–∞–ø–∏—Å #{result.id} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!\n"
            f"–ù–æ–≤–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞: {format_salary(result.calculated_salary_uah, result.usd_rate, result.eur_rate)}",
            reply_markup=get_main_menu_markup()
        )
    elif isinstance(result, str) and result == "–ó–º—ñ–Ω –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ.":
         bot.send_message(chat_id, "–ó–º—ñ–Ω –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ.", reply_markup=get_main_menu_markup())
    else:
        bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—É: {result}", reply_markup=get_main_menu_markup())

    reset_user_state(chat_id)


# --- –§—É–Ω–∫—Ü—ñ—ó –∫—Ä–æ–∫—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É (/delete) ---
@bot.message_handler(commands=['delete'])
def delete_start(message, record_id=None):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É."""
    chat_id = message.chat.id
    reset_user_state(chat_id)
    set_user_state(chat_id, STATE_DELETE_ID_CONFIRM)

    if record_id is not None:
         message.text = str(record_id)
         delete_id_step(message)
    else:
        bot.send_message(chat_id, "–í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É. –í–≤–µ–¥—ñ—Ç—å ID –∑–∞–ø–∏—Å—É, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è):", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, delete_id_step)

def delete_id_step(message):
    """–ö—Ä–æ–∫ 1 –≤–∏–¥–∞–ª–µ–Ω–Ω—è: –í–≤–µ–¥–µ–Ω–Ω—è ID —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è."""
    chat_id = message.chat.id
    if message.text and message.text.strip() == '/cancel': cancel_action(message); return
    if get_user_state(chat_id) != STATE_DELETE_ID_CONFIRM: return

    if not message.text:
         bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å ID –∑–∞–ø–∏—Å—É —á–∏—Å–ª–æ–º:", reply_markup=types.ReplyKeyboardRemove())
         bot.register_next_step_handler(message, delete_id_step); return

    record_id_input = message.text.strip()

    try:
        int(record_id_input)
    except ValueError:
        bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: ID –∑–∞–ø–∏—Å—É –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∞–±–æ /cancel:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, delete_id_step); return

    result = manager.delete_salary_record(record_id_input)

    if isinstance(result, manager.MonthlySalaryRecord):
        bot.send_message(chat_id, f"‚úÖ –ó–∞–ø–∏—Å #{result.id} –∑–∞ {result.month_year} –¥–ª—è {result.employee_name} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!", reply_markup=get_main_menu_markup())
    else:
        bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É: {result}", reply_markup=get_main_menu_markup())

    reset_user_state(chat_id)


# --- –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    bot.infinity_polling(skip_pending=True)
