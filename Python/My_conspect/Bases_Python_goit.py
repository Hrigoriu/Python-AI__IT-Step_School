Основні типи даних включають:
Цілі числа (int)
Дійсні числа (float)
Рядки (str)
Булеві значення (bool)
"""
Наприклад, студентку Марію 25 років,
яка має вагу в 60.5 кілограм,
ми могли би описати тепер так:
"""
name = "Марія"  # str
age = 25  # int
weight = 60.5  # float
is_student = True  # bool
print(name, age, weight, is_student) #Виведе Марія 25 60.5 True

Списки — це гнучкі контейнери, що дозволяють зберігати набір елементів.
my_list = ["apple", "banana", "cherry"]
print(my_list[1])  # Виведе "banana"

my_list = ["apple", "banana", "cherry"]
my_list[1] = "blueberry"
print(my_list) #Виведе "apple", "blueberry", "cherry"

для додавання нового елемента в кінець списку,
будемо використовувати метод .append().
my_list = ["apple", "blueberry", "cherry"]
my_list.append("orange")
print(my_list) #Виведе ['apple', 'blueberry', 'cherry', 'orange']

Якщо ми захочемо додати елемент на певну позицію
то необхідно використати метод .insert(i, x),
де i — індекс, на якому буде доданий елемент,
а x — елемент, який необхідно додати.
my_list = ["apple", "blueberry", "cherry", "orange"]
my_list.insert(1, "banana")
print(my_list) #Виведе ['apple', 'banana', 'blueberry', 'cherry', 'orange']

Для видалення елементу за значенням використовується метод .remove(x),
де x — значення елемента, який необхідно видалити.
my_list = ["apple", "banana", "blueberry", "cherry", "orange"]
my_list.remove("banana")
print(my_list)  #Виведе ['apple', 'blueberry', 'cherry', 'orange']


Словники — це структури даних, які зберігають пари ключ-значення.
my_dict = {"name": "Олексій", "age": 30}
print(my_dict["name"])
print(my_dict["age"])
#Олексій
#30

my_dict = {"name": "Олексій", "age": 30}
my_dict["age"] = 31
print(my_dict) # Виведе {'name': 'Олексій', 'age': 31}

my_dict = {"name": "Олексій", "age": 31}
my_dict["email"] = "oleksiy@gmail.com"
print(my_dict) #Виведе {'name': 'Олексій', 'age': 31, 'email': 'oleksiy@gmail.com'}
"""
В коді вже створено словник language, який містить наступні ключі зі значеннями:
{"name": 'Python', "version": 3.11}
Додайте до словника новий ключ year зі значенням року появи мови програмування Python,
це 1991 рік.
Також змініть значення для ключа version змінивши версію на 3.12.
"""

language = {"name": 'Python', "version": 3.11}
language['version'] = 3.12
print(language)
language['year'] = 1991
print(language)

my_dict = {"name": "Олексій", "age": 31, "email": "oleksiy@gmail.com"}
del my_dict["email"]
print(my_dict) # Виведе {'name': 'Олексій', 'age': 31}

Умови
Оператор if є найпростішою формою умовного виразу в Python.
Він перевіряє істинність виразу та виконує блок коду, якщо умова є істинною.

if умова:
    # Виконати цей код, якщо умова істинна (4 пробіла)

my_dict = {"name": "Олексій", "age": 31}

if my_dict["age"] >= 18:
    print("Ви повнолітній") #Виведе Ви повнолітній

    1.Більше ніж   >. Оператор повертає True, якщо ліва сторона більша ніж права.
    2.Менше ніж    <. Повертає True, якщо ліва сторона менша ніж права.
    3.Дорівнює    ==. Перевіряє, чи рівні ліва та права сторони, і повертає
      True, якщо вони дорівнюють один одному.
    4.Не дорівнює !=. Повертає True, якщо ліва та права сторони
      не дорівнюють один одному.
    5.Більше або дорівнює >=. Цей оператор повертає True, якщо ліва сторона
      більша або дорівнює правій.
    6.Менше або дорівнює  <=. Повертає True, якщо ліва сторона
      менш або дорівнює правій.

if умова:
    # Виконати цей код, якщо умова істинна
else:
    # Виконати цей код, якщо умова не істинна

my_dict = {"name": "Андрій", "age": 16}
if my_dict["age"] >= 18:
    print("Ви повнолітній")
else:
    print("Вибачте, ви ще не маєте права голосу")

if перша умова:
    # Виконати код, якщо перша умова істинна
elif друга умова:
    # Виконати код, якщо друга умова істинна
else:
    # Виконати код, якщо жодна з умов не істинна

my_dict = {"name": "Степан", "age": 65}
if my_dict["age"] <= 18:
    print("Вибачте, ви ще не маєте права голосу")
elif my_dict["age"] >= 65:
    print("Ви маєте право на пенсію")
else:
    print("Ви повнолітній, але ще не маєте права на пенсію")


Цикли
for змінна in колекція:
    # Виконати блок коду

fruits = ["яблуко", "банан", "вишня"]
for fruit in fruits:
    print(fruit)
#Виведе яблуко
#Виведе банан
#Виведе вишня

"""
Довжину рядка ми можемо знайти за допомоги вбудованої функції len. 
Але, якщо ми захочемо отримати кількість не пробільних символів, 
то можемо в циклі for пробігтися по рядку і якщо він не пробіл 
порахувати цей символ.

В коді змінна length буде зберігати кількість не пробільних символів. 
Зараз вона ініціалізована значенням 0. В циклі for, 
який ітерується по рядку sentence, 
в кожній ітерації циклу додавайте 1 до змінної length, 
якщо це не пробіл: length = length + 1. 
Так ви отримаєте загальну кількість не пробільних символів в рядку.
"""

sentence = "The quick brown fox jumps over the lazy dog"
length = 0
for i in sentence:
    if i != " ":
        length = length + 1
print(length)

часто разом з циклом for використовується функція range().
Вона застосовується для генерації послідовності чисел.
✅ Функція range() генерує послідовність чисел,
що починається з нуля за замовчуванням і закінчується на число,
яке на одиницю менше, ніж вказано в аргументі.
Така поведінка більше пов_язана з математичними традиціями в комп_ютерних науках.

for i in range(5):
    print(i)
"""Виводить
0
1
2
3
4
"""
Сама функція range() може приймати до трьох аргументів: початок, кінець, та крок.
for i in range(1, 10, 2):
    print(i)
"""Виводить
1
3
5
7
9
"""
Вам дано частково написаний код, що обчислює суму чисел:

summary = 0

for i in range():  # Додайте необхідні параметри до функції range
    summary = summary + i
""" 
Вам потрібно дописати параметри до функції range() у циклі for,
щоб код коректно обчислював суму всіх цілих чисел від 1 до 100 включно. 
Після виконання циклу значення змінної summary буде зберігати 
суму всіх чисел у заданому діапазоні: 5050.
"""
summary = 0

for i in range(1, 101):
    summary = summary + i

✅ Коли застосовувати цикл for?
Коли потрібно працювати з кожним елементом у колекції даних
або виконати дію певну кількість разів.

while умова:
    # Блок коду, який буде виконуватися
    Він працює, поки виконується певна умова, ніби
    ми кажемо: "Продовжуй читати книгу, поки не досягнеш закладки".
    У програмуванні це означає, що код всередині циклу while
    буде виконуватися знову і знову, доки певна умова не стане неправдивою.

✅ Коли застосовувати цикл while?
Коли потрібно продовжувати виконання дії,
поки існує певна умова, і не відомо заздалегідь,
скільки разів потрібно буде повторити дію.

count = 0
while count < 5:
    print("Число:", count)
    count = count + 1
""" Виведе
Число: 0
Число: 1
Число: 2
Число: 3
Число: 4
"""

Додавання x + y
Віднімання x - y
Множення x * y
Ділення x / y
Піднесення до степеня x ** y

"""
Напишіть програму на Python, яка використовує цикл while 
для обчислення суми квадратів чисел від 1 до N. 
Число N ви задаєте в коді як сталу, наприклад, N = 10.
Цикл while повинен виконати ітерації від 1 до N. 
Визначте <умову> циклу while щоб буди виконані все ітерації 
від 1 до N. На кожній ітерації додайте квадрат поточного 
числа i до загальної суми sum_squares (Підказка: квадрат числа 
це i помножене на само себе). Також збільшуйте 
оточне число i на кожній ітерації на одиницю, 
щоб сума правильно порахувалась.
Якщо N = 10, виведення має бути: 
The sum of the squares of numbers from 1 to 10 is 385.
"""
N = 10
sum_squares = 0
i = 1
while i <= N:
    sum_squares += i * i
    i = i +1

print(f"The sum of the squares of numbers from 1 to {N} is {sum_squares}")


Функції
Для створення функції використовується ключове слово def,
за яким слідує назва функції та круглі дужки.
В дужках можуть бути параметри, які функція приймає,
але це не обов_язково. Після дужок ставиться двокрапка,
і на наступних рядках іде тіло функції.
def say_hello():
    print("Привіт, світ!")

say_hello()

def print_message(message):
    print(message)

print_message("Це повідомлення з функції.")

"""
В коді вже існує рядок message. 
Вам необхідно тепер створити функцію з ім_ям function 
яка приймає параметр message та виводить повідомлення print(message).
Можете виконати виклик функції та передати в якості аргументу рядок message.
"""
def function(message):
    print(message)
message = "Hello world!"

Функції можуть "повертати" значення за допомогою
ключового слова return. Після return функція
припиняє своє виконання і повертає вказане значення.

def add_numbers(a, b):
    return a + b
result = add_numbers(5, 3)
print(result) #8

"""
Зараз наша функція function використовує цикл while 
для обчислення суми квадратів чисел від 1 до N. 
Число N ви задаєте в коді як сталу, наприклад, N = 10.
Щоб цей код запрацював правильно вам потрібно 
виконати декілька дій в коді:
Передати параметр n в функцію
Повернути з функції результат обчислення: змінна sum_squares
Присвоїти результат виконання функції function змінній result. 
Пам'ятайте про аргумент функції при виклику!
"""
N = 10
def function(n):
    sum_squares = 0
    i = 1
    while i <= n:
        sum_squares = sum_squares + i * i
        i = i + 1
    return sum_squares

result = function(N)
print(result)

Робота з рядками
my_string = "Привіт, світ!"
print(my_string) # Виведе Привіт, світ!

first_name = "Олексій"
last_name = "Гупало"
full_name = first_name + " " + last_name
print(full_name) #Виведе Олексій Гупало

"""
Вам потрібно написати функцію get_fullname, 
яка приймає два аргументи: first_name та last_name. 
Функція має повернути повне ім'я, 
об'єднавши ці два аргументи з пробілом між ними.
В коді вже створено змінні first_name та last_name 
зі значеннями "John" та "Doe" відповідно. 
Вони будуть аргументами для функції get_fullname.
Збережіть результат роботи функції get_fullname в змінну fullname
"""
first_name = "John"
last_name = "Doe"
def get_fullname(first_name, last_name):
  return first_name + " " + last_name
fullname = get_fullname(first_name, last_name)
print(fullname)

Досить часто необхідно визначити кількість символів
у рядку і отримати довжину рядка.
Для цього ми використовуємо функцію len() :
first_name = "Олексій"
last_name = "Гупало"
full_name = first_name + " " + last_name
print(len(full_name)) #14 символів.

first_name = "Олексій"
last_name = "Гупало"
full_name = first_name + " " + last_name
length = len(full_name)
print(full_name[0])
print(full_name[length - 1])
""" Виведе
О
о
"""

"""
Тепер знаючи, як отримати доступ до окремого символу 
в рядку за допомогою індексації виконаємо наступну задачу.
Потрібно написати функцію get_initials, яка приймає 
параметри: first_name і last_name. Функція має повертати рядок, 
що складається з прізвища та ініціалу імені.
Наприклад якщо first_name = "John" та last_name = "Doe" 
то результат роботи функції get_initials повинен бути рядок "Doe J."
Викличте функцію get_initials, передаючи їй створені змінні 
як аргументи та збережіть результат роботи функції в змінну formatted_name.
"""
first_name = "John"
last_name = "Doe"
def get_initials(first_name, last_name):
    return last_name +  " " + first_name[0] + "."
formatted_name  = get_initials(first_name, last_name)
print(formatted_name)

Метод upper() перетворює всі маленькі букви в рядку на великі (верхній регістр).
text = "Python"
print(text.upper())  #PYTHON

Метод lower(), навпаки, перетворює всі великі букви в рядку на маленькі (нижній регістр).
text = "Python"
print(text.lower())  #python

Метод strip() видаляє всі пробільні символи на початку і в кінці рядка.
Це необхідно для очищення тексту від небажаних пробілів
які можуть випадково залишитись при вводі даних.
text = "  hello  "
print(text.strip()) #hello

"""
Вам дано дві змінні first та second зі значеннями 
"Python" та "python" відповідно. Ваше завдання — написати 
функцію compare, яка приймає два рядки як аргументи 
і повертає True, якщо рядки однакові, не враховуючи регістр, 
і False у протилежному випадку.
Напишіть функцію compare, яка порівнює два рядки на еквівалентність, 
ігноруючи великі та малі букви. 
Використовуйте метод .lower() або .upper() для перетворення рядків 
у загальний регістр перед порівнянням. Використайте створені 
змінні first та second для тестування вашої функції. 
Результат повинен бути логічним значенням True або False залежно 
від того, чи є рядки однаковими після приведення регістру. 
Збережіть результат виконання функції compare в змінну result.
"""
first = "Python"
second = "python"
def compare(first, second):
    return first.lower() == second.lower()
result = compare(first, second)
print(result)

Для пошуку в рядках використовуємо метод find(sub).
Він шукає підрядок sub у рядку і повертає індекс його першої появи.
Яккщо підрядок не знайдено, то метод повертає -1.
text = "Hello, world!"
print(text.find("world"))
print(text.find("Python"))
#Виведе7
#Виведе-1

Метод replace(old, new). Він замінює всі входження
підрядка old на підрядок new у рядку.
Це дозволяє легко замінювати одну частину тексту на іншу.
text = "I like cats"
new_text = text.replace("cats", "dogs")
print(new_text) #Виведе I like dogs

"""
Вам дано текстовий рядок:
text = "Hello, world! Welcome to the world of Python."
Виконайте наступні дії.
Знайдіть позицію слова "world" у рядку text. 
Використовуйте метод find() для визначення першої позиції 
цього слова в тексті та збережіть результат у змінній position.
Замініть всі входження слова "world" на "planet" у рядку text. 
Використовуйте метод replace() для заміни та 
збережіть результат у змінній updated_text.
"""
text = "Hello, world! Welcome to the world of Python."
position = text.find("world")
updated_text = text.replace("world", "planet")
print(position)
print(updated_text)


Форматування рядків. Форматування рядків дозволяє вставляти змінні
або вирази всередину рядка. Воно дозволяє вставляти вирази всередину
рядкових літералів, використовуючи префікс f перед початком рядкового літерала.
Для використання f-рядків, просто додайте f безпосередньо перед початковими лапками рядка.
Всередині цього рядка ви можете вставляти змінні, вирази або виклики функцій у фігурних дужках {}.
name = "Олексій"
age = 30
greeting = f"Мене звати {name}, і мені {age} років."
print(greeting) # Виведе Мене звати Олексій, і мені 30 років.

"""
Напишіть функцію format_product_info, яка приймає назву продукту, 
ціну та кількість товару на складі як параметри функції та 
повертає відформатований рядок інформації про продукт, використовуючи f-рядок.
Отже, функція format_product_info повинна приймати 
три параметри: name - назва продукту, price - ціна продукту 
і quantity - кількість товару на складі. 
Вона має повертати сформований f-рядок, який включає всю цю інформацію. 
Збережіть результат виконання функції format_product_info в змінну product_info.
Наведемо приклад використання функції:
product_name = "Coffee Maker"
product_price = 7500.50
product_quantity = 15
def format_product_info():
# Ваша реалізація функції з використанням f-рядка
# Виклик функції
product_info = format_product_info(product_name, product_price, product_quantity)
print(product_info)
Оформлення повернутого рядка має включати назву продукту, 
ціну та кількість на складі у наступному читабельному форматі.
Product: Coffee Maker, Price: 7500.5 UAH, Quantity: 15 pcs.
Зверніть увагу на пробіли та знаки пунктуації. 
Будьте уважні при відтворенні прикладу виведення у f-рядку.
"""
product_name = "Coffee Maker"
product_price = 7500.50
product_quantity = 15
def format_product_info(name, price, quantity):
    return f"Product: {name}, Price: {price} UAH, Quantity: {quantity} pcs."
product_info = format_product_info(product_name, product_price, product_quantity)
print(product_info)