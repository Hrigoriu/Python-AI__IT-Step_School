        #Списки.Вступ
str, int, float,
"""
Колекції значень:
1. list, tuple
2. dict
3. set, frozenet
"""

numbers = [1, 2, 3, 4, 5, 6, 7, 8]
names = ['Сергій', "Боб", 'Антон', "Олег", "Богдан"]
soup_list = ['helo', 10, False, None, print, 2345.5]
empty_list = list()

# 2.Робота з індексами
print(names[1]) # Виведе Боб , отримання елемента за індексом
print(names[1:4]) # Виведе Боб, Антон, Олег, Отримання підсписку за зрізом

names[2] = "Ольга" # Замінить Антон на Ольга
print(names) # Заміна значення за індексом
             # (так можна, бо список - змінювальна послідовність)
names[5] = 'Джон' #IndexError
print(names)

#3. Методи списків
    #3.1 Розширення
names.append('Роман') #Додає новий елемент в кінець списку
names.insert(2, 'Денис') #втсавляє новий елемент на конкретний індекс (вставляє між)

    #3.2 Видалення
names.remove('Боб') # видаляє елемент по значенню
names.remove('Боб') #якщо елементу вже не існує - ValueError
names.pop() # видаляє елемент по індексу/
       # якщо не вказувати індекс, то видаляє останній елемент, як індекс-1
el = names.pop() # окрім видалення, елемент повертається (у змінну)
print(f'Видалений елемент: {el}')

    #3.3 Стандартні методи
names.clear() # Очищає список
print(names.index("Денис")) # Повертає індекс елемента (по значенню)
print(names.count('Сергій')) # Повертає кількість елементів (може бути 0)

name_copy = names.copy # повертає автономну копію списку
                       # не пов'язану з оригіналом

a = [1, 2, 3]
b = a.copy
a.clear()
print(id(a))
print(id(b))

    #4. Сортування
names.reverse() # Розвертає список навпаки
names.sort(key=len, reverse=True) #сортування

    #5. Ітерація та функція
print(len(names)) # Кількість елементів
print(sum(numbers))
print(min(numbers))
print(max(numbers))
for el in names:
    print(f'Ім`я: {el.upper()}') # Напише всі слова з великої літери

#6. Кортеж
t = (1, 2, 3, 4, 5)  # Кортеж - незмінювальна версія списку
print(t[0])

for el in t:
    print(el)

t = list(t) # Перетворює у список
print(t)

t = tuple(t)
print(t)
