- Клас:     шаблон поведінки об'єкту. Наприклад: str, int, bool
- Об'єкт:   конкретний екземпляр класу. Наприклад, "Hello, world", 15, True
- Атрибут: "властивість" або "характеристика" класу.
            Або просто зміна, що описана всередині класу
- Метод:    "дія" класу або просто функція, що описана всередині класу
            (прив'язується до певного класу)
- self:     посилання на конкретний екземпляр у методі.
            Кожен метод починається з параметру self.
            Може мати будь-яку назву, але прийнято саме self.
- __init__ - магічний метод-конструктор.
            Спрацьовує, коли ініціалізується новий екземпляр класу.
            Класично, використовується для назначення всіх атрибутів класу
- Магічні методи (dunder methods): спеціальні методи, що вже є у стандартному класі Python,
            та викликлаються при спеціальній ситуації
            (наприклад, перетворення, ініціалізація, перегрузка операторів, ітерація, тощо).
- Агрегація:  варіант зв'язку класів, коли класи спокійно існують один без одного.
- Композиція: варіант зв'язку класів, коли один клас не може існувати без іншого.
- super():    посилання на батьківський клас, що використовується в наслідуванні.
- Наслідування: здатність класів переймати та доповнювати поведінку один одного.
                є батьківський та дочірній клас
- Поліморфізм:  здатність класів одного "сімейства" взаємозаміняти один одного (в одному інтерфейсі).
- Інкапсуляція: механізм "захисту" внутрішньої структури від втручання
                (розділ структури на внутрішню та інтерфейс)
                Прикладом інкапсуляції являються три режими доступу:
  1. public -       публічний доступ
            атрибут або метод доступний скрізь
            (і всередині класу (і в батьківському класі і в дочірніх класах), і зовні)
  2. protected -    умовно захищений доступ
            атрибут або метод доступний тільки всередині класу та його дочірніх класів (не доступний зовні)
            позначається одним підкресленням _, наприклад, def _helper(self):
  3. private -      умовно приватний доступ
            атрибут або метод доступний тільки всередині класу (і тільки в ньому)
            позначається двома підкресленнями __, наприклад, def __private_method(self):
- Класовий метод: метод, що працює на рівні класу та має аргумент cls замість slf   (@classmethod)
- Абстрактний метод: метод, що обов'язково повинен бути переназначений в дочірніх класах.
                    (import -> from abc import ABC, abstractmethod)
- Статичний метод: метод, що не має посилання на self або cls
            Метод ніяк не змінює атрибути, методи, а просто знаходиться у класі
            та робить якісь дії з зовнішніми аргументами. (@staticmethod)
- Метаклас: клас, що керує створенням інших класів.
- __new__: ініціалізатор класу (на об'єкту). Викликається в метакласі при створенні нового класу.
- Функтор: клас, що може викликатись, як функція. У функторі обов'язковим є метод __cal__
- Дескриптор: клас, що управляє конкретним атрибутом. Має метод __get__ та __set__.

        #   ПАТЕРНИ ПРОЄКТУВАННЯ  #

    # Породжувальні патерни

1. Singleton(Одинак)
Суть патерну: гарантує, що у класу буде тільки один екземпляр

2. Фабричний метод(Factory Method)
Interface -> Class2 -> Class3
Суть патерну: реалізує інтерфейс створення об'єкта, але дозволяє підкласам вирішувати
              у "фабричному методі", який саме клас створювати

3. Абстрактна Фабрика (Abstract Factory)
Суть патерну: реалізує інтерфейс для створення цілих сімейств об'єктів

4. Будівельник (Builder)
Суть патерну: розділяє створення складного об'єкта від його представлення.
              Переносить логіку створення на клас-будівельник

5. Прототип (Prototype)
Суть патерну: можна створювати об'єкти шляхом копіювання вже існуючих

    # СТУКТУРНІ ПАТЕРНИ

1. Фасад (Facade)
Суть патерну: дає спрощений інтерфейс до складної системи класів
            (пов'язує класи середині себе)

2. Адаптер(Adapter)
Суть патерну: призводить інтерфейс одного класа до потрібного
              (адаптує клас під потреби)

3. Композит (Composite)
Суть патерну: створення деревоподібної структури об'єктів з однаковим інтерфейсом

4. Декоратор(Decorator)
Суть патерну: динамічно додає новий функціонал, зберігши старий


