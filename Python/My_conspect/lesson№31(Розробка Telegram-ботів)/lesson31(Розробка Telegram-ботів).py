import telebot as tb
from telebot import types  # –æ–∫—Ä–µ–º–æ —ñ–º–ø–æ—Ä—Ç—É—î–º–æ types

from bot_service import Service  # —Å—é–¥–∏ —Å–≤—ñ–π —Ñ–∞–π–ª, –¥–µ –ª–µ–∂–∏—Ç—å Service

from functools import partial  # —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π "–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä", —â–æ –¥–æ–∑–≤–æ–ª—è—î –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —Ç–∞ —ó—ó –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –æ–∫—Ä–µ–º–æ


TOKEN = '7791357414:AAFnWP0c3lHIdjloUq8GD0ILL-EcXKOUAV4'  # –≤–∞—à —Ç–æ–∫–µ–Ω —Å—é–¥–∏, –±–æ —Ü–µ–π –º—ñ–π, –≤—ñ–Ω –Ω–µ —Å–ø—Ä–∞—Ü—é—î :)
bot = tb.TeleBot(TOKEN)
service = Service()
admin_id = 523793990 #–≤–∞—à id —Å—é–¥–∏

def send_question(user_id: int, username: str):
    question_data = service.send_question(user_id)

    if not question_data:
        score = service.end_quiz(user_id)

        bot.send_message(user_id, text=f'–í—ñ–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–∫—ñ–Ω—á–µ–Ω–æ! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}!')
        bot.send_message(admin_id, text=f'{username} –ø—Ä–æ–π—à–æ–≤ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–≤ {score}!')
        return

    markup = types.InlineKeyboardMarkup()

    for index, option in enumerate(question_data['options']):
        markup.add(types.InlineKeyboardButton(text=option, callback_data=f'quizanswer_{index}'))

    bot.send_message(user_id, text=question_data['question'], reply_markup=markup)


def send_password(message: types.Message):
    password_len = message.text
    password = service.generate_password(password_len)

    if not password:
        bot.send_message(message.chat.id, text='–î–æ–≤–∂–∏–Ω–∞ –ø–∞—Ä–æ–ª—é –Ω–µ–≤—ñ—Ä–Ω–∞, –∞–±–æ –≤–∏ –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!')
        return

    bot.send_message(message.chat.id, text=f'–í–∞—à –ø–∞—Ä–æ–ª—å: {password}')


def send_admin_answer(message: types.Message, user_id: int):
    bot.send_message(user_id, text=f'–í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω–∞ –Ω–∞ —Ç–≤–æ—é –æ—Ü—ñ–Ω–∫—É: "{message.text}"')


@bot.message_handler(commands=['start'])
def start(message: types.Message):
    btn_1 = types.KeyboardButton('–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—éüß®')
    btn_2 = types.KeyboardButton('–í—ñ–¥–≥—É–∫–∏üòé')
    btn_3 = types.KeyboardButton('–í—ñ–∫—Ç–æ—Ä–∏–Ω–∞ü§ì')
    btn_4 = types.KeyboardButton('–¶—ñ–∫–∞–≤—ñ —Å–∞–π—Ç–∏üòâ')

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # markup - –¥–æ—à–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫, —è–∫–∞ –Ω–∞–¥—Å–∏–ª–∞—î —ó—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É

    markup.add(btn_1, btn_2)  # –∫–æ–∂–µ–Ω add - –æ–¥–∏–Ω —Ä—è–¥
    markup.add(btn_3, btn_4)

    bot.send_message(message.chat.id,
                     text='–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–µ—Å—Ç–æ–≤–∏–π –±–æ—Ç!ü§ì',
                     reply_markup=markup)


@bot.message_handler(content_types=['text'])
def get_text_message(message: types.Message):
    message_text = message.text  # –¥—ñ—Å—Ç–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    chat_id = message.chat.id  # –¥—ñ—Å—Ç–∞—î–º–æ –∞–π–¥—ñ —á–∞—Ç—É (–ø–æ —è–∫–æ–º—É –±—É–¥–µ–º–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ)
    print(chat_id)

    match message_text:
        case '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—éüß®':
            bot_message = bot.send_message(chat_id, text='–û–ö! –ù–∞–¥—ñ—à–ª–∏ –¥–æ–≤–∂–∏–Ω—É –ø–∞—Ä–æ–ª—é –≤—ñ–¥ 8 –¥–æ 35üòÄ')

            bot.register_next_step_handler(bot_message, send_password)
        case '–í—ñ–¥–≥—É–∫–∏üòé':
            btn_5 = types.InlineKeyboardButton(text='5üòç', callback_data=f'grade_5')
            btn_4 = types.InlineKeyboardButton(text='4üòä', callback_data=f'grade_4')
            btn_3 = types.InlineKeyboardButton(text='3üòì', callback_data=f'grade_3')
            btn_2 = types.InlineKeyboardButton(text='2ü§¢', callback_data=f'grade_2')
            btn_1 = types.InlineKeyboardButton(text='1ü§Æ', callback_data=f'grade_1')

            markup = types.InlineKeyboardMarkup()
            markup.add(btn_5, btn_4, btn_3, btn_2, btn_1, row_width=1)

            bot.send_message(chat_id, text='–û–±–µ—Ä–∏ –æ—Ü—ñ–Ω–∫—É, —è–∫—É –ø–æ—Å—Ç–∞–≤–∏—à –º–µ–Ω—ñ:', reply_markup=markup)
        case '–í—ñ–∫—Ç–æ—Ä–∏–Ω–∞ü§ì':
            markup = types.InlineKeyboardMarkup()
            titles = service.get_titles(chat_id)

            for t in titles:
                markup.add(types.InlineKeyboardButton(text=t, callback_data=f'quizstart_{t}'))

            bot.send_message(chat_id, text='–û–±–µ—Ä–∏ —Ç–µ–º—É –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏!', reply_markup=markup)
        case '–¶—ñ–∫–∞–≤—ñ —Å–∞–π—Ç–∏üòâ':
            btn_1 = types.InlineKeyboardButton(text='–ü–∞–∫–µ—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä Python', url='https://pypi.org/')
            btn_2 = types.InlineKeyboardButton(text='–û—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å–∞–π—Ç Python', url='https://www.python.org/')

            markup = types.InlineKeyboardMarkup()  # –º–∞—Ä–∫–∞–ø –¥–ª—è –∫–Ω–æ–ø–æ–∫, —â–æ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è —É —á–∞—Ç—ñ (–Ω–µ –¥–ª—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–∏—Ö)
            markup.add(btn_1, btn_2, row_width=1)

            bot.send_message(chat_id, text='–û—Å—å —Ü—ñ–∫–∞–≤—ñ —Å–∞–π—Ç–∏ –¥–ª—è —Ç–µ–±–µ:', reply_markup=markup)
        case _:
            bot.send_message(chat_id, text='–Ø —Ç–µ–±–µ –Ω–µ —Ä–æ–∑—É–º—ñ—é(')


@bot.callback_query_handler(func=lambda callback: callback.data.startswith('grade'))  # –æ–±—Ä–æ–±–Ω–∏–∫ callback`—É –≤—ñ–¥ –∫–Ω–æ–ø–∫–∏. func -
def get_grade(callback: types.CallbackQuery):
    grade = callback.data[-1]   # –≤–º—ñ—Å—Ç —Å–∞–º–æ–≥–æ –∫–æ–ª–±–µ–∫—É (–¥–∞–Ω—ñ –∫–Ω–æ–ø–∫–∏)
    username = callback.from_user.username
    user_id = callback.from_user.id

    call_id = callback.id  # id –∫–æ–ª–±–µ–∫—É (—Ç—Ä–µ–±–∞ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –±–æ—Ç–∞)

    bot.answer_callback_query(call_id, text='–î—è–∫—É—é –∑–∞ –æ—Ü—ñ–Ω–∫—É!')  # –æ—Ñ—ñ—Ü—ñ–π–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –±–æ—Ç—É –Ω–∞ –∫–æ–ª–±–µ–∫ (–∑–∞–∫—Ä–∏–≤–∞—î –ø—Ä–æ–≥—Ä—É–∑–∫—É –∫–Ω–æ–ø–∫–∏)
    bot.edit_message_text(chat_id=callback.message.chat.id,
                          message_id=callback.message.id,
                          text='–û—Ü—ñ–Ω–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                          reply_markup=types.InlineKeyboardMarkup())

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏: ', callback_data=f'adminanswer_{user_id}'))

    bot.send_message(admin_id, text=f'{username} –ø–æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–±—ñ –æ—Ü—ñ–Ω–∫—É {grade}!', reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: callback.data.startswith('adminanswer'))  # –æ–±—Ä–æ–±–Ω–∏–∫ callback`—É –≤—ñ–¥ –∫–Ω–æ–ø–∫–∏. func -
def admin_answer(callback: types.CallbackQuery):
    user_id = int(callback.data.split('_')[1])
    call_id = callback.id

    bot.answer_callback_query(call_id, text='–ü–∏—à–∏ —Å–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!')
    bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.id,
                              text='–ü–∏—à–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∏–∂—á–µ!',
                              reply_markup=types.InlineKeyboardMarkup())

    bot.register_next_step_handler(callback.message, partial(send_admin_answer, user_id=user_id))


@bot.callback_query_handler(func=lambda callback: callback.data.startswith('quizstart'))  # –æ–±—Ä–æ–±–Ω–∏–∫ callback`—É –≤—ñ–¥ –∫–Ω–æ–ø–∫–∏. func -
def start_quiz(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    quiz_name = callback.data.split('_')[1]

    bot.answer_callback_query(callback.id, text='–í—ñ–∫—Ç–æ—Ä–∏–Ω—É —Ä–æ–∑–ø–æ—á–∞—Ç–æ!')
    service.start_quiz(user_id, quiz_name)
    send_question(user_id, callback.from_user.username)  # –≤–µ–ª–æ—Å–∏–ø–µ–¥, –≤–∏–±–∞—á—Ç–µ


@bot.callback_query_handler(func=lambda callback: callback.data.startswith('quizanswer'))  # –æ–±—Ä–æ–±–Ω–∏–∫ callback`—É –≤—ñ–¥ –∫–Ω–æ–ø–∫–∏. func -
def check_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_answer_index = int(callback.data.split('_')[1])

    bot.answer_callback_query(callback.id, text='–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!')

    answer_result = service.check_answer(user_id, user_answer_index)
    bot.edit_message_text(chat_id=callback.message.chat.id,
                          message_id=callback.message.id,
                          text='–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞!' if answer_result else '–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞!',
                          reply_markup=types.InlineKeyboardMarkup())
    send_question(user_id, callback.from_user.username)  # –≤–µ–ª–æ—Å–∏–ø–µ–¥, –≤–∏–±–∞—á—Ç–µ


bot.polling(none_stop=True)  # –±–æ—Ç –ø—ñ–Ω–≥—É—î –≤ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
